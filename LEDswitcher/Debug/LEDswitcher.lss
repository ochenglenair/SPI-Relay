
LEDswitcher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ad4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00001ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  20000064  00001b38  00020064  2**2
                  ALLOC
  3 .stack        00002000  200000b8  00001b8c  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001f2c7  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002425  00000000  00000000  0003f3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ad4d  00000000  00000000  000417d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000950  00000000  00000000  0004c51e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a28  00000000  00000000  0004ce6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018adb  00000000  00000000  0004d896  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c748  00000000  00000000  00066371  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088968  00000000  00000000  00072ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001bf8  00000000  00000000  000fb424  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 20 00 20 25 01 00 00 21 01 00 00 21 01 00 00     . . %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      8c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	00001ad4 	.word	0x00001ad4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	00001ad4 	.word	0x00001ad4
     10c:	00001ad4 	.word	0x00001ad4
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	00000391 	.word	0x00000391

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     126:	4a23      	ldr	r2, [pc, #140]	; (1b4 <Reset_Handler+0x90>)
     128:	4b23      	ldr	r3, [pc, #140]	; (1b8 <Reset_Handler+0x94>)
     12a:	429a      	cmp	r2, r3
     12c:	d009      	beq.n	142 <Reset_Handler+0x1e>
     12e:	4b22      	ldr	r3, [pc, #136]	; (1b8 <Reset_Handler+0x94>)
     130:	4a20      	ldr	r2, [pc, #128]	; (1b4 <Reset_Handler+0x90>)
     132:	e003      	b.n	13c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     134:	6811      	ldr	r1, [r2, #0]
     136:	6019      	str	r1, [r3, #0]
     138:	3304      	adds	r3, #4
     13a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     13c:	491f      	ldr	r1, [pc, #124]	; (1bc <Reset_Handler+0x98>)
     13e:	428b      	cmp	r3, r1
     140:	d3f8      	bcc.n	134 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     142:	4b1f      	ldr	r3, [pc, #124]	; (1c0 <Reset_Handler+0x9c>)
     144:	e002      	b.n	14c <Reset_Handler+0x28>
                *pDest++ = 0;
     146:	2200      	movs	r2, #0
     148:	601a      	str	r2, [r3, #0]
     14a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     14c:	4a1d      	ldr	r2, [pc, #116]	; (1c4 <Reset_Handler+0xa0>)
     14e:	4293      	cmp	r3, r2
     150:	d3f9      	bcc.n	146 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     152:	4a1d      	ldr	r2, [pc, #116]	; (1c8 <Reset_Handler+0xa4>)
     154:	21ff      	movs	r1, #255	; 0xff
     156:	4b1d      	ldr	r3, [pc, #116]	; (1cc <Reset_Handler+0xa8>)
     158:	438b      	bics	r3, r1
     15a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	39fd      	subs	r1, #253	; 0xfd
     15e:	2390      	movs	r3, #144	; 0x90
     160:	005b      	lsls	r3, r3, #1
     162:	4a1b      	ldr	r2, [pc, #108]	; (1d0 <Reset_Handler+0xac>)
     164:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     166:	4a1b      	ldr	r2, [pc, #108]	; (1d4 <Reset_Handler+0xb0>)
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	2503      	movs	r5, #3
     16c:	43ab      	bics	r3, r5
     16e:	2402      	movs	r4, #2
     170:	4323      	orrs	r3, r4
     172:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     174:	78d3      	ldrb	r3, [r2, #3]
     176:	270c      	movs	r7, #12
     178:	43bb      	bics	r3, r7
     17a:	2608      	movs	r6, #8
     17c:	4333      	orrs	r3, r6
     17e:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     180:	4b15      	ldr	r3, [pc, #84]	; (1d8 <Reset_Handler+0xb4>)
     182:	7b98      	ldrb	r0, [r3, #14]
     184:	2230      	movs	r2, #48	; 0x30
     186:	4390      	bics	r0, r2
     188:	2220      	movs	r2, #32
     18a:	4310      	orrs	r0, r2
     18c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     18e:	7b99      	ldrb	r1, [r3, #14]
     190:	43b9      	bics	r1, r7
     192:	4331      	orrs	r1, r6
     194:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     196:	7b9a      	ldrb	r2, [r3, #14]
     198:	43aa      	bics	r2, r5
     19a:	4322      	orrs	r2, r4
     19c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     19e:	4a0f      	ldr	r2, [pc, #60]	; (1dc <Reset_Handler+0xb8>)
     1a0:	6851      	ldr	r1, [r2, #4]
     1a2:	2380      	movs	r3, #128	; 0x80
     1a4:	430b      	orrs	r3, r1
     1a6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1a8:	4b0d      	ldr	r3, [pc, #52]	; (1e0 <Reset_Handler+0xbc>)
     1aa:	4798      	blx	r3
        main();
     1ac:	4b0d      	ldr	r3, [pc, #52]	; (1e4 <Reset_Handler+0xc0>)
     1ae:	4798      	blx	r3
     1b0:	e7fe      	b.n	1b0 <Reset_Handler+0x8c>
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	00001ad4 	.word	0x00001ad4
     1b8:	20000000 	.word	0x20000000
     1bc:	20000064 	.word	0x20000064
     1c0:	20000064 	.word	0x20000064
     1c4:	200000b8 	.word	0x200000b8
     1c8:	e000ed00 	.word	0xe000ed00
     1cc:	00000000 	.word	0x00000000
     1d0:	41007000 	.word	0x41007000
     1d4:	41005000 	.word	0x41005000
     1d8:	41004800 	.word	0x41004800
     1dc:	41004000 	.word	0x41004000
     1e0:	00001095 	.word	0x00001095
     1e4:	00000e91 	.word	0x00000e91

000001e8 <SPI_0_PORT_init>:
struct spi_m_sync_descriptor SPI_0;

struct usart_sync_descriptor USART_0;

void SPI_0_PORT_init(void)
{
     1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ea:	46c6      	mov	lr, r8
     1ec:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     1ee:	22c0      	movs	r2, #192	; 0xc0
     1f0:	05d2      	lsls	r2, r2, #23
     1f2:	2310      	movs	r3, #16
     1f4:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     1f6:	6093      	str	r3, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     1f8:	4b25      	ldr	r3, [pc, #148]	; (290 <SPI_0_PORT_init+0xa8>)
     1fa:	4926      	ldr	r1, [pc, #152]	; (294 <SPI_0_PORT_init+0xac>)
     1fc:	6299      	str	r1, [r3, #40]	; 0x28
     1fe:	21c0      	movs	r1, #192	; 0xc0
     200:	0609      	lsls	r1, r1, #24
     202:	468c      	mov	ip, r1
     204:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     206:	2044      	movs	r0, #68	; 0x44
     208:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     20a:	2701      	movs	r7, #1
     20c:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     20e:	2601      	movs	r6, #1
     210:	4331      	orrs	r1, r6
     212:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     214:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     216:	2132      	movs	r1, #50	; 0x32
     218:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     21a:	250f      	movs	r5, #15
     21c:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
     21e:	2403      	movs	r4, #3
     220:	46a0      	mov	r8, r4
     222:	4644      	mov	r4, r8
     224:	4320      	orrs	r0, r4
     226:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     228:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     22a:	2020      	movs	r0, #32
     22c:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     22e:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     230:	4819      	ldr	r0, [pc, #100]	; (298 <SPI_0_PORT_init+0xb0>)
     232:	6298      	str	r0, [r3, #40]	; 0x28
     234:	4660      	mov	r0, ip
     236:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     238:	2045      	movs	r0, #69	; 0x45
     23a:	4684      	mov	ip, r0
     23c:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     23e:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     240:	4330      	orrs	r0, r6
     242:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     244:	4664      	mov	r4, ip
     246:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     248:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     24a:	3c36      	subs	r4, #54	; 0x36
     24c:	4020      	ands	r0, r4
	tmp |= PORT_PMUX_PMUXO(data);
     24e:	2430      	movs	r4, #48	; 0x30
     250:	46a4      	mov	ip, r4
     252:	4664      	mov	r4, ip
     254:	4320      	orrs	r0, r4
     256:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     258:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     25a:	310e      	adds	r1, #14
     25c:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     25e:	4a0f      	ldr	r2, [pc, #60]	; (29c <SPI_0_PORT_init+0xb4>)
     260:	629a      	str	r2, [r3, #40]	; 0x28
     262:	4a0f      	ldr	r2, [pc, #60]	; (2a0 <SPI_0_PORT_init+0xb8>)
     264:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     266:	2246      	movs	r2, #70	; 0x46
     268:	5c99      	ldrb	r1, [r3, r2]
     26a:	2004      	movs	r0, #4
     26c:	4381      	bics	r1, r0
     26e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     270:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     272:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     274:	4331      	orrs	r1, r6
     276:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     278:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     27a:	2133      	movs	r1, #51	; 0x33
     27c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     27e:	43aa      	bics	r2, r5
	tmp |= PORT_PMUX_PMUXE(data);
     280:	4640      	mov	r0, r8
     282:	4302      	orrs	r2, r0
     284:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     286:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
}
     288:	bc04      	pop	{r2}
     28a:	4690      	mov	r8, r2
     28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     28e:	46c0      	nop			; (mov r8, r8)
     290:	41004400 	.word	0x41004400
     294:	40000010 	.word	0x40000010
     298:	40000020 	.word	0x40000020
     29c:	40020040 	.word	0x40020040
     2a0:	c0020000 	.word	0xc0020000

000002a4 <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     2a4:	4a04      	ldr	r2, [pc, #16]	; (2b8 <SPI_0_CLOCK_init+0x14>)
     2a6:	6a13      	ldr	r3, [r2, #32]
     2a8:	2104      	movs	r1, #4
     2aa:	430b      	orrs	r3, r1
     2ac:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     2ae:	4a03      	ldr	r2, [pc, #12]	; (2bc <SPI_0_CLOCK_init+0x18>)
     2b0:	4b03      	ldr	r3, [pc, #12]	; (2c0 <SPI_0_CLOCK_init+0x1c>)
     2b2:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     2b4:	4770      	bx	lr
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	40000400 	.word	0x40000400
     2bc:	00004014 	.word	0x00004014
     2c0:	40000c00 	.word	0x40000c00

000002c4 <SPI_0_init>:

void SPI_0_init(void)
{
     2c4:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     2c6:	4b04      	ldr	r3, [pc, #16]	; (2d8 <SPI_0_init+0x14>)
     2c8:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     2ca:	4904      	ldr	r1, [pc, #16]	; (2dc <SPI_0_init+0x18>)
     2cc:	4804      	ldr	r0, [pc, #16]	; (2e0 <SPI_0_init+0x1c>)
     2ce:	4b05      	ldr	r3, [pc, #20]	; (2e4 <SPI_0_init+0x20>)
     2d0:	4798      	blx	r3
	SPI_0_PORT_init();
     2d2:	4b05      	ldr	r3, [pc, #20]	; (2e8 <SPI_0_init+0x24>)
     2d4:	4798      	blx	r3
}
     2d6:	bd10      	pop	{r4, pc}
     2d8:	000002a5 	.word	0x000002a5
     2dc:	42000800 	.word	0x42000800
     2e0:	20000090 	.word	0x20000090
     2e4:	000004dd 	.word	0x000004dd
     2e8:	000001e9 	.word	0x000001e9

000002ec <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     2ec:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2ee:	4b0f      	ldr	r3, [pc, #60]	; (32c <USART_0_PORT_init+0x40>)
     2f0:	2256      	movs	r2, #86	; 0x56
     2f2:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2f4:	2501      	movs	r5, #1
     2f6:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2f8:	2401      	movs	r4, #1
     2fa:	4321      	orrs	r1, r4
     2fc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2fe:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     300:	203b      	movs	r0, #59	; 0x3b
     302:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     304:	3a47      	subs	r2, #71	; 0x47
     306:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     308:	2202      	movs	r2, #2
     30a:	4311      	orrs	r1, r2
     30c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     30e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     310:	2157      	movs	r1, #87	; 0x57
     312:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     314:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     316:	4322      	orrs	r2, r4
     318:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     31a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     31c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     31e:	3948      	subs	r1, #72	; 0x48
     320:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     322:	2120      	movs	r1, #32
     324:	430a      	orrs	r2, r1
     326:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     328:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
     32a:	bd30      	pop	{r4, r5, pc}
     32c:	41004400 	.word	0x41004400

00000330 <USART_0_CLOCK_init>:
     330:	4a04      	ldr	r2, [pc, #16]	; (344 <USART_0_CLOCK_init+0x14>)
     332:	6a13      	ldr	r3, [r2, #32]
     334:	2120      	movs	r1, #32
     336:	430b      	orrs	r3, r1
     338:	6213      	str	r3, [r2, #32]
     33a:	4a03      	ldr	r2, [pc, #12]	; (348 <USART_0_CLOCK_init+0x18>)
     33c:	4b03      	ldr	r3, [pc, #12]	; (34c <USART_0_CLOCK_init+0x1c>)
     33e:	805a      	strh	r2, [r3, #2]

void USART_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     340:	4770      	bx	lr
     342:	46c0      	nop			; (mov r8, r8)
     344:	40000400 	.word	0x40000400
     348:	00004017 	.word	0x00004017
     34c:	40000c00 	.word	0x40000c00

00000350 <USART_0_init>:

void USART_0_init(void)
{
     350:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     352:	4b05      	ldr	r3, [pc, #20]	; (368 <USART_0_init+0x18>)
     354:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM3, (void *)NULL);
     356:	2200      	movs	r2, #0
     358:	4904      	ldr	r1, [pc, #16]	; (36c <USART_0_init+0x1c>)
     35a:	4805      	ldr	r0, [pc, #20]	; (370 <USART_0_init+0x20>)
     35c:	4b05      	ldr	r3, [pc, #20]	; (374 <USART_0_init+0x24>)
     35e:	4798      	blx	r3
	USART_0_PORT_init();
     360:	4b05      	ldr	r3, [pc, #20]	; (378 <USART_0_init+0x28>)
     362:	4798      	blx	r3
}
     364:	bd10      	pop	{r4, pc}
     366:	46c0      	nop			; (mov r8, r8)
     368:	00000331 	.word	0x00000331
     36c:	42001400 	.word	0x42001400
     370:	200000a8 	.word	0x200000a8
     374:	000006fd 	.word	0x000006fd
     378:	000002ed 	.word	0x000002ed

0000037c <delay_driver_init>:

void delay_driver_init(void)
{
     37c:	b510      	push	{r4, lr}
	delay_init(SysTick);
     37e:	4802      	ldr	r0, [pc, #8]	; (388 <delay_driver_init+0xc>)
     380:	4b02      	ldr	r3, [pc, #8]	; (38c <delay_driver_init+0x10>)
     382:	4798      	blx	r3
}
     384:	bd10      	pop	{r4, pc}
     386:	46c0      	nop			; (mov r8, r8)
     388:	e000e010 	.word	0xe000e010
     38c:	00000439 	.word	0x00000439

00000390 <system_init>:

void system_init(void)
{
     390:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     392:	4b20      	ldr	r3, [pc, #128]	; (414 <system_init+0x84>)
     394:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     396:	22c0      	movs	r2, #192	; 0xc0
     398:	05d2      	lsls	r2, r2, #23
     39a:	2304      	movs	r3, #4
     39c:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     39e:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3a0:	4b1d      	ldr	r3, [pc, #116]	; (418 <system_init+0x88>)
     3a2:	491e      	ldr	r1, [pc, #120]	; (41c <system_init+0x8c>)
     3a4:	6299      	str	r1, [r3, #40]	; 0x28
     3a6:	21c0      	movs	r1, #192	; 0xc0
     3a8:	0609      	lsls	r1, r1, #24
     3aa:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ac:	2442      	movs	r4, #66	; 0x42
     3ae:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b0:	2101      	movs	r1, #1
     3b2:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b4:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b6:	3405      	adds	r4, #5
     3b8:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ba:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3bc:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3be:	2580      	movs	r5, #128	; 0x80
     3c0:	022d      	lsls	r5, r5, #8
     3c2:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c4:	4816      	ldr	r0, [pc, #88]	; (420 <system_init+0x90>)
     3c6:	6298      	str	r0, [r3, #40]	; 0x28
     3c8:	4816      	ldr	r0, [pc, #88]	; (424 <system_init+0x94>)
     3ca:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3cc:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3ce:	3408      	adds	r4, #8
     3d0:	5d18      	ldrb	r0, [r3, r4]
     3d2:	2604      	movs	r6, #4
     3d4:	4330      	orrs	r0, r6
     3d6:	b2c0      	uxtb	r0, r0
     3d8:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3da:	6195      	str	r5, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3dc:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3de:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e0:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3e2:	3475      	adds	r4, #117	; 0x75
     3e4:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3e6:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e8:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3ea:	2080      	movs	r0, #128	; 0x80
     3ec:	05c0      	lsls	r0, r0, #23
     3ee:	3c30      	subs	r4, #48	; 0x30
     3f0:	5110      	str	r0, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3f2:	3c0c      	subs	r4, #12
     3f4:	5110      	str	r0, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3f6:	22a8      	movs	r2, #168	; 0xa8
     3f8:	5098      	str	r0, [r3, r2]
     3fa:	480b      	ldr	r0, [pc, #44]	; (428 <system_init+0x98>)
     3fc:	5098      	str	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3fe:	20de      	movs	r0, #222	; 0xde
     400:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     402:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     404:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	SPI_0_init();
     406:	4b09      	ldr	r3, [pc, #36]	; (42c <system_init+0x9c>)
     408:	4798      	blx	r3

	USART_0_init();
     40a:	4b09      	ldr	r3, [pc, #36]	; (430 <system_init+0xa0>)
     40c:	4798      	blx	r3

	delay_driver_init();
     40e:	4b09      	ldr	r3, [pc, #36]	; (434 <system_init+0xa4>)
     410:	4798      	blx	r3
}
     412:	bd70      	pop	{r4, r5, r6, pc}
     414:	000007b9 	.word	0x000007b9
     418:	41004400 	.word	0x41004400
     41c:	40000004 	.word	0x40000004
     420:	40028000 	.word	0x40028000
     424:	c0020000 	.word	0xc0020000
     428:	c0004000 	.word	0xc0004000
     42c:	000002c5 	.word	0x000002c5
     430:	00000351 	.word	0x00000351
     434:	0000037d 	.word	0x0000037d

00000438 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     438:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     43a:	4b02      	ldr	r3, [pc, #8]	; (444 <delay_init+0xc>)
     43c:	6018      	str	r0, [r3, #0]
     43e:	4b02      	ldr	r3, [pc, #8]	; (448 <delay_init+0x10>)
     440:	4798      	blx	r3
}
     442:	bd10      	pop	{r4, pc}
     444:	20000080 	.word	0x20000080
     448:	00000db1 	.word	0x00000db1

0000044c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     44c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     44e:	4b04      	ldr	r3, [pc, #16]	; (460 <delay_us+0x14>)
     450:	681c      	ldr	r4, [r3, #0]
     452:	4b04      	ldr	r3, [pc, #16]	; (464 <delay_us+0x18>)
     454:	4798      	blx	r3
     456:	0001      	movs	r1, r0
     458:	0020      	movs	r0, r4
     45a:	4b03      	ldr	r3, [pc, #12]	; (468 <delay_us+0x1c>)
     45c:	4798      	blx	r3
}
     45e:	bd10      	pop	{r4, pc}
     460:	20000080 	.word	0x20000080
     464:	000007a1 	.word	0x000007a1
     468:	00000dbd 	.word	0x00000dbd

0000046c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     46c:	b570      	push	{r4, r5, r6, lr}
     46e:	0004      	movs	r4, r0
     470:	000d      	movs	r5, r1
     472:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     474:	2800      	cmp	r0, #0
     476:	d00e      	beq.n	496 <io_write+0x2a>
     478:	2900      	cmp	r1, #0
     47a:	d00a      	beq.n	492 <io_write+0x26>
     47c:	2001      	movs	r0, #1
     47e:	2234      	movs	r2, #52	; 0x34
     480:	4906      	ldr	r1, [pc, #24]	; (49c <io_write+0x30>)
     482:	4b07      	ldr	r3, [pc, #28]	; (4a0 <io_write+0x34>)
     484:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     486:	6823      	ldr	r3, [r4, #0]
     488:	0032      	movs	r2, r6
     48a:	0029      	movs	r1, r5
     48c:	0020      	movs	r0, r4
     48e:	4798      	blx	r3
}
     490:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     492:	2000      	movs	r0, #0
     494:	e7f3      	b.n	47e <io_write+0x12>
     496:	2000      	movs	r0, #0
     498:	e7f1      	b.n	47e <io_write+0x12>
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	0000193c 	.word	0x0000193c
     4a0:	00000775 	.word	0x00000775

000004a4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     4a4:	b570      	push	{r4, r5, r6, lr}
     4a6:	0004      	movs	r4, r0
     4a8:	000d      	movs	r5, r1
     4aa:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     4ac:	2800      	cmp	r0, #0
     4ae:	d00e      	beq.n	4ce <io_read+0x2a>
     4b0:	2900      	cmp	r1, #0
     4b2:	d00a      	beq.n	4ca <io_read+0x26>
     4b4:	2001      	movs	r0, #1
     4b6:	223d      	movs	r2, #61	; 0x3d
     4b8:	4906      	ldr	r1, [pc, #24]	; (4d4 <io_read+0x30>)
     4ba:	4b07      	ldr	r3, [pc, #28]	; (4d8 <io_read+0x34>)
     4bc:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     4be:	6863      	ldr	r3, [r4, #4]
     4c0:	0032      	movs	r2, r6
     4c2:	0029      	movs	r1, r5
     4c4:	0020      	movs	r0, r4
     4c6:	4798      	blx	r3
}
     4c8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     4ca:	2000      	movs	r0, #0
     4cc:	e7f3      	b.n	4b6 <io_read+0x12>
     4ce:	2000      	movs	r0, #0
     4d0:	e7f1      	b.n	4b6 <io_read+0x12>
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	0000193c 	.word	0x0000193c
     4d8:	00000775 	.word	0x00000775

000004dc <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     4dc:	b570      	push	{r4, r5, r6, lr}
     4de:	0004      	movs	r4, r0
     4e0:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     4e2:	2800      	cmp	r0, #0
     4e4:	d017      	beq.n	516 <spi_m_sync_init+0x3a>
     4e6:	2900      	cmp	r1, #0
     4e8:	d013      	beq.n	512 <spi_m_sync_init+0x36>
     4ea:	2001      	movs	r0, #1
     4ec:	2240      	movs	r2, #64	; 0x40
     4ee:	490b      	ldr	r1, [pc, #44]	; (51c <spi_m_sync_init+0x40>)
     4f0:	4b0b      	ldr	r3, [pc, #44]	; (520 <spi_m_sync_init+0x44>)
     4f2:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     4f4:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     4f6:	1d20      	adds	r0, r4, #4
     4f8:	0029      	movs	r1, r5
     4fa:	4b0a      	ldr	r3, [pc, #40]	; (524 <spi_m_sync_init+0x48>)
     4fc:	4798      	blx	r3

	if (rc < 0) {
     4fe:	2800      	cmp	r0, #0
     500:	db06      	blt.n	510 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     502:	4b09      	ldr	r3, [pc, #36]	; (528 <spi_m_sync_init+0x4c>)
     504:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     506:	4b09      	ldr	r3, [pc, #36]	; (52c <spi_m_sync_init+0x50>)
     508:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     50a:	4b09      	ldr	r3, [pc, #36]	; (530 <spi_m_sync_init+0x54>)
     50c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     50e:	2000      	movs	r0, #0
}
     510:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
     512:	2000      	movs	r0, #0
     514:	e7ea      	b.n	4ec <spi_m_sync_init+0x10>
     516:	2000      	movs	r0, #0
     518:	e7e8      	b.n	4ec <spi_m_sync_init+0x10>
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	00001950 	.word	0x00001950
     520:	00000775 	.word	0x00000775
     524:	000009fd 	.word	0x000009fd
     528:	ffff8000 	.word	0xffff8000
     52c:	000005e1 	.word	0x000005e1
     530:	000005a5 	.word	0x000005a5

00000534 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     534:	b510      	push	{r4, lr}
     536:	0004      	movs	r4, r0
	ASSERT(spi);
     538:	1e43      	subs	r3, r0, #1
     53a:	4198      	sbcs	r0, r3
     53c:	b2c0      	uxtb	r0, r0
     53e:	2257      	movs	r2, #87	; 0x57
     540:	4903      	ldr	r1, [pc, #12]	; (550 <spi_m_sync_enable+0x1c>)
     542:	4b04      	ldr	r3, [pc, #16]	; (554 <spi_m_sync_enable+0x20>)
     544:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     546:	1d20      	adds	r0, r4, #4
     548:	4b03      	ldr	r3, [pc, #12]	; (558 <spi_m_sync_enable+0x24>)
     54a:	4798      	blx	r3
}
     54c:	bd10      	pop	{r4, pc}
     54e:	46c0      	nop			; (mov r8, r8)
     550:	00001950 	.word	0x00001950
     554:	00000775 	.word	0x00000775
     558:	00000bf9 	.word	0x00000bf9

0000055c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     55c:	b530      	push	{r4, r5, lr}
     55e:	b087      	sub	sp, #28
     560:	0004      	movs	r4, r0
     562:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     564:	2800      	cmp	r0, #0
     566:	d015      	beq.n	594 <spi_m_sync_transfer+0x38>
     568:	2900      	cmp	r1, #0
     56a:	d011      	beq.n	590 <spi_m_sync_transfer+0x34>
     56c:	2001      	movs	r0, #1
     56e:	22b3      	movs	r2, #179	; 0xb3
     570:	4909      	ldr	r1, [pc, #36]	; (598 <spi_m_sync_transfer+0x3c>)
     572:	4b0a      	ldr	r3, [pc, #40]	; (59c <spi_m_sync_transfer+0x40>)
     574:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     576:	682b      	ldr	r3, [r5, #0]
     578:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     57a:	686b      	ldr	r3, [r5, #4]
     57c:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     57e:	68ab      	ldr	r3, [r5, #8]
     580:	9301      	str	r3, [sp, #4]
     582:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     584:	1d20      	adds	r0, r4, #4
     586:	a903      	add	r1, sp, #12
     588:	4b05      	ldr	r3, [pc, #20]	; (5a0 <spi_m_sync_transfer+0x44>)
     58a:	4798      	blx	r3
}
     58c:	b007      	add	sp, #28
     58e:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     590:	2000      	movs	r0, #0
     592:	e7ec      	b.n	56e <spi_m_sync_transfer+0x12>
     594:	2000      	movs	r0, #0
     596:	e7ea      	b.n	56e <spi_m_sync_transfer+0x12>
     598:	00001950 	.word	0x00001950
     59c:	00000775 	.word	0x00000775
     5a0:	00000c2d 	.word	0x00000c2d

000005a4 <_spi_m_sync_io_write>:
{
     5a4:	b570      	push	{r4, r5, r6, lr}
     5a6:	b084      	sub	sp, #16
     5a8:	0004      	movs	r4, r0
     5aa:	000e      	movs	r6, r1
     5ac:	0015      	movs	r5, r2
	ASSERT(io);
     5ae:	1e43      	subs	r3, r0, #1
     5b0:	4198      	sbcs	r0, r3
     5b2:	b2c0      	uxtb	r0, r0
     5b4:	22a3      	movs	r2, #163	; 0xa3
     5b6:	4907      	ldr	r1, [pc, #28]	; (5d4 <_spi_m_sync_io_write+0x30>)
     5b8:	4b07      	ldr	r3, [pc, #28]	; (5d8 <_spi_m_sync_io_write+0x34>)
     5ba:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     5bc:	0020      	movs	r0, r4
     5be:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
     5c0:	2300      	movs	r3, #0
     5c2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     5c4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     5c6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     5c8:	a901      	add	r1, sp, #4
     5ca:	4b04      	ldr	r3, [pc, #16]	; (5dc <_spi_m_sync_io_write+0x38>)
     5cc:	4798      	blx	r3
}
     5ce:	b004      	add	sp, #16
     5d0:	bd70      	pop	{r4, r5, r6, pc}
     5d2:	46c0      	nop			; (mov r8, r8)
     5d4:	00001950 	.word	0x00001950
     5d8:	00000775 	.word	0x00000775
     5dc:	0000055d 	.word	0x0000055d

000005e0 <_spi_m_sync_io_read>:
{
     5e0:	b570      	push	{r4, r5, r6, lr}
     5e2:	b084      	sub	sp, #16
     5e4:	0004      	movs	r4, r0
     5e6:	000e      	movs	r6, r1
     5e8:	0015      	movs	r5, r2
	ASSERT(io);
     5ea:	1e43      	subs	r3, r0, #1
     5ec:	4198      	sbcs	r0, r3
     5ee:	b2c0      	uxtb	r0, r0
     5f0:	2287      	movs	r2, #135	; 0x87
     5f2:	4907      	ldr	r1, [pc, #28]	; (610 <_spi_m_sync_io_read+0x30>)
     5f4:	4b07      	ldr	r3, [pc, #28]	; (614 <_spi_m_sync_io_read+0x34>)
     5f6:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     5f8:	0020      	movs	r0, r4
     5fa:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
     5fc:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     5fe:	2300      	movs	r3, #0
     600:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     602:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     604:	a901      	add	r1, sp, #4
     606:	4b04      	ldr	r3, [pc, #16]	; (618 <_spi_m_sync_io_read+0x38>)
     608:	4798      	blx	r3
}
     60a:	b004      	add	sp, #16
     60c:	bd70      	pop	{r4, r5, r6, pc}
     60e:	46c0      	nop			; (mov r8, r8)
     610:	00001950 	.word	0x00001950
     614:	00000775 	.word	0x00000775
     618:	0000055d 	.word	0x0000055d

0000061c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     61e:	0005      	movs	r5, r0
     620:	000e      	movs	r6, r1
     622:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     624:	2800      	cmp	r0, #0
     626:	d023      	beq.n	670 <usart_sync_write+0x54>
     628:	2900      	cmp	r1, #0
     62a:	d023      	beq.n	674 <usart_sync_write+0x58>
     62c:	2a00      	cmp	r2, #0
     62e:	d123      	bne.n	678 <usart_sync_write+0x5c>
     630:	2000      	movs	r0, #0
     632:	22f1      	movs	r2, #241	; 0xf1
     634:	4911      	ldr	r1, [pc, #68]	; (67c <usart_sync_write+0x60>)
     636:	4b12      	ldr	r3, [pc, #72]	; (680 <usart_sync_write+0x64>)
     638:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     63a:	002c      	movs	r4, r5
     63c:	3408      	adds	r4, #8
     63e:	0020      	movs	r0, r4
     640:	4b10      	ldr	r3, [pc, #64]	; (684 <usart_sync_write+0x68>)
     642:	4798      	blx	r3
     644:	2800      	cmp	r0, #0
     646:	d0f8      	beq.n	63a <usart_sync_write+0x1e>
     648:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     64a:	5d71      	ldrb	r1, [r6, r5]
     64c:	0020      	movs	r0, r4
     64e:	4b0e      	ldr	r3, [pc, #56]	; (688 <usart_sync_write+0x6c>)
     650:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     652:	0020      	movs	r0, r4
     654:	4b0b      	ldr	r3, [pc, #44]	; (684 <usart_sync_write+0x68>)
     656:	4798      	blx	r3
     658:	2800      	cmp	r0, #0
     65a:	d0fa      	beq.n	652 <usart_sync_write+0x36>
			;
	} while (++offset < length);
     65c:	3501      	adds	r5, #1
     65e:	42bd      	cmp	r5, r7
     660:	d3f3      	bcc.n	64a <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     662:	0020      	movs	r0, r4
     664:	4b09      	ldr	r3, [pc, #36]	; (68c <usart_sync_write+0x70>)
     666:	4798      	blx	r3
     668:	2800      	cmp	r0, #0
     66a:	d0fa      	beq.n	662 <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     66c:	0028      	movs	r0, r5
     66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     670:	2000      	movs	r0, #0
     672:	e7de      	b.n	632 <usart_sync_write+0x16>
     674:	2000      	movs	r0, #0
     676:	e7dc      	b.n	632 <usart_sync_write+0x16>
     678:	2001      	movs	r0, #1
     67a:	e7da      	b.n	632 <usart_sync_write+0x16>
     67c:	0000196c 	.word	0x0000196c
     680:	00000775 	.word	0x00000775
     684:	000009db 	.word	0x000009db
     688:	000009cb 	.word	0x000009cb
     68c:	000009e5 	.word	0x000009e5

00000690 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     692:	46ce      	mov	lr, r9
     694:	4647      	mov	r7, r8
     696:	b580      	push	{r7, lr}
     698:	1e05      	subs	r5, r0, #0
     69a:	4688      	mov	r8, r1
     69c:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     69e:	d01f      	beq.n	6e0 <usart_sync_read+0x50>
     6a0:	2900      	cmp	r1, #0
     6a2:	d01f      	beq.n	6e4 <usart_sync_read+0x54>
     6a4:	2a00      	cmp	r2, #0
     6a6:	d11f      	bne.n	6e8 <usart_sync_read+0x58>
     6a8:	2000      	movs	r0, #0
     6aa:	2286      	movs	r2, #134	; 0x86
     6ac:	0052      	lsls	r2, r2, #1
     6ae:	490f      	ldr	r1, [pc, #60]	; (6ec <usart_sync_read+0x5c>)
     6b0:	4b0f      	ldr	r3, [pc, #60]	; (6f0 <usart_sync_read+0x60>)
     6b2:	4798      	blx	r3
	uint32_t                      offset = 0;
     6b4:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     6b6:	002c      	movs	r4, r5
     6b8:	3408      	adds	r4, #8
     6ba:	0020      	movs	r0, r4
     6bc:	4b0d      	ldr	r3, [pc, #52]	; (6f4 <usart_sync_read+0x64>)
     6be:	4798      	blx	r3
     6c0:	2800      	cmp	r0, #0
     6c2:	d0f8      	beq.n	6b6 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     6c4:	4643      	mov	r3, r8
     6c6:	199f      	adds	r7, r3, r6
     6c8:	0020      	movs	r0, r4
     6ca:	4b0b      	ldr	r3, [pc, #44]	; (6f8 <usart_sync_read+0x68>)
     6cc:	4798      	blx	r3
     6ce:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     6d0:	3601      	adds	r6, #1
     6d2:	454e      	cmp	r6, r9
     6d4:	d3ef      	bcc.n	6b6 <usart_sync_read+0x26>

	return (int32_t)offset;
}
     6d6:	0030      	movs	r0, r6
     6d8:	bc0c      	pop	{r2, r3}
     6da:	4690      	mov	r8, r2
     6dc:	4699      	mov	r9, r3
     6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     6e0:	2000      	movs	r0, #0
     6e2:	e7e2      	b.n	6aa <usart_sync_read+0x1a>
     6e4:	2000      	movs	r0, #0
     6e6:	e7e0      	b.n	6aa <usart_sync_read+0x1a>
     6e8:	2001      	movs	r0, #1
     6ea:	e7de      	b.n	6aa <usart_sync_read+0x1a>
     6ec:	0000196c 	.word	0x0000196c
     6f0:	00000775 	.word	0x00000775
     6f4:	000009f1 	.word	0x000009f1
     6f8:	000009d3 	.word	0x000009d3

000006fc <usart_sync_init>:
{
     6fc:	b570      	push	{r4, r5, r6, lr}
     6fe:	0004      	movs	r4, r0
     700:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     702:	2800      	cmp	r0, #0
     704:	d014      	beq.n	730 <usart_sync_init+0x34>
     706:	2900      	cmp	r1, #0
     708:	d010      	beq.n	72c <usart_sync_init+0x30>
     70a:	2001      	movs	r0, #1
     70c:	2234      	movs	r2, #52	; 0x34
     70e:	4909      	ldr	r1, [pc, #36]	; (734 <usart_sync_init+0x38>)
     710:	4b09      	ldr	r3, [pc, #36]	; (738 <usart_sync_init+0x3c>)
     712:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     714:	0020      	movs	r0, r4
     716:	3008      	adds	r0, #8
     718:	0029      	movs	r1, r5
     71a:	4b08      	ldr	r3, [pc, #32]	; (73c <usart_sync_init+0x40>)
     71c:	4798      	blx	r3
	if (init_status) {
     71e:	2800      	cmp	r0, #0
     720:	d103      	bne.n	72a <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     722:	4b07      	ldr	r3, [pc, #28]	; (740 <usart_sync_init+0x44>)
     724:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     726:	4b07      	ldr	r3, [pc, #28]	; (744 <usart_sync_init+0x48>)
     728:	6023      	str	r3, [r4, #0]
}
     72a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     72c:	2000      	movs	r0, #0
     72e:	e7ed      	b.n	70c <usart_sync_init+0x10>
     730:	2000      	movs	r0, #0
     732:	e7eb      	b.n	70c <usart_sync_init+0x10>
     734:	0000196c 	.word	0x0000196c
     738:	00000775 	.word	0x00000775
     73c:	0000098d 	.word	0x0000098d
     740:	00000691 	.word	0x00000691
     744:	0000061d 	.word	0x0000061d

00000748 <usart_sync_enable>:
{
     748:	b510      	push	{r4, lr}
     74a:	0004      	movs	r4, r0
	ASSERT(descr);
     74c:	1e43      	subs	r3, r0, #1
     74e:	4198      	sbcs	r0, r3
     750:	b2c0      	uxtb	r0, r0
     752:	2253      	movs	r2, #83	; 0x53
     754:	4904      	ldr	r1, [pc, #16]	; (768 <usart_sync_enable+0x20>)
     756:	4b05      	ldr	r3, [pc, #20]	; (76c <usart_sync_enable+0x24>)
     758:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     75a:	0020      	movs	r0, r4
     75c:	3008      	adds	r0, #8
     75e:	4b04      	ldr	r3, [pc, #16]	; (770 <usart_sync_enable+0x28>)
     760:	4798      	blx	r3
}
     762:	2000      	movs	r0, #0
     764:	bd10      	pop	{r4, pc}
     766:	46c0      	nop			; (mov r8, r8)
     768:	0000196c 	.word	0x0000196c
     76c:	00000775 	.word	0x00000775
     770:	000009b9 	.word	0x000009b9

00000774 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     774:	2800      	cmp	r0, #0
     776:	d100      	bne.n	77a <assert+0x6>
		__asm("BKPT #0");
     778:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     77a:	4770      	bx	lr

0000077c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     77c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     77e:	4a06      	ldr	r2, [pc, #24]	; (798 <_sbrk+0x1c>)
     780:	6812      	ldr	r2, [r2, #0]
     782:	2a00      	cmp	r2, #0
     784:	d004      	beq.n	790 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     786:	4a04      	ldr	r2, [pc, #16]	; (798 <_sbrk+0x1c>)
     788:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     78a:	18c3      	adds	r3, r0, r3
     78c:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     78e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     790:	4902      	ldr	r1, [pc, #8]	; (79c <_sbrk+0x20>)
     792:	4a01      	ldr	r2, [pc, #4]	; (798 <_sbrk+0x1c>)
     794:	6011      	str	r1, [r2, #0]
     796:	e7f6      	b.n	786 <_sbrk+0xa>
     798:	20000084 	.word	0x20000084
     79c:	200020b8 	.word	0x200020b8

000007a0 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
     7a0:	b510      	push	{r4, lr}
     7a2:	0003      	movs	r3, r0
		return (us * (freq / 10000) - 1) / 100 + 1;
     7a4:	2064      	movs	r0, #100	; 0x64
     7a6:	4358      	muls	r0, r3
     7a8:	3801      	subs	r0, #1
     7aa:	2164      	movs	r1, #100	; 0x64
     7ac:	4b01      	ldr	r3, [pc, #4]	; (7b4 <_get_cycles_for_us+0x14>)
     7ae:	4798      	blx	r3
     7b0:	3001      	adds	r0, #1
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     7b2:	bd10      	pop	{r4, pc}
     7b4:	00000f7d 	.word	0x00000f7d

000007b8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     7b8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     7ba:	4b06      	ldr	r3, [pc, #24]	; (7d4 <_init_chip+0x1c>)
     7bc:	685a      	ldr	r2, [r3, #4]
     7be:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     7c0:	4b05      	ldr	r3, [pc, #20]	; (7d8 <_init_chip+0x20>)
     7c2:	4798      	blx	r3
	_sysctrl_init_sources();
     7c4:	4b05      	ldr	r3, [pc, #20]	; (7dc <_init_chip+0x24>)
     7c6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     7c8:	4b05      	ldr	r3, [pc, #20]	; (7e0 <_init_chip+0x28>)
     7ca:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     7cc:	20ff      	movs	r0, #255	; 0xff
     7ce:	4b05      	ldr	r3, [pc, #20]	; (7e4 <_init_chip+0x2c>)
     7d0:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     7d2:	bd10      	pop	{r4, pc}
     7d4:	41004000 	.word	0x41004000
     7d8:	00000809 	.word	0x00000809
     7dc:	00000d41 	.word	0x00000d41
     7e0:	00000d8d 	.word	0x00000d8d
     7e4:	000007e9 	.word	0x000007e9

000007e8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     7e8:	07c3      	lsls	r3, r0, #31
     7ea:	d50a      	bpl.n	802 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     7ec:	4b05      	ldr	r3, [pc, #20]	; (804 <_gclk_init_generators_by_fref+0x1c>)
     7ee:	2280      	movs	r2, #128	; 0x80
     7f0:	0052      	lsls	r2, r2, #1
     7f2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     7f4:	2283      	movs	r2, #131	; 0x83
     7f6:	0252      	lsls	r2, r2, #9
     7f8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     7fa:	4b02      	ldr	r3, [pc, #8]	; (804 <_gclk_init_generators_by_fref+0x1c>)
     7fc:	785b      	ldrb	r3, [r3, #1]
     7fe:	09db      	lsrs	r3, r3, #7
     800:	d1fb      	bne.n	7fa <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     802:	4770      	bx	lr
     804:	40000c00 	.word	0x40000c00

00000808 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     808:	4b06      	ldr	r3, [pc, #24]	; (824 <_pm_init+0x1c>)
     80a:	7a1a      	ldrb	r2, [r3, #8]
     80c:	b2d2      	uxtb	r2, r2
     80e:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     810:	7a5a      	ldrb	r2, [r3, #9]
     812:	b2d2      	uxtb	r2, r2
     814:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     816:	7a9a      	ldrb	r2, [r3, #10]
     818:	b2d2      	uxtb	r2, r2
     81a:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     81c:	7ada      	ldrb	r2, [r3, #11]
     81e:	b2d2      	uxtb	r2, r2
     820:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     822:	4770      	bx	lr
     824:	40000400 	.word	0x40000400

00000828 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     828:	4b02      	ldr	r3, [pc, #8]	; (834 <_sercom_get_hardware_index+0xc>)
     82a:	469c      	mov	ip, r3
     82c:	4460      	add	r0, ip
     82e:	0a80      	lsrs	r0, r0, #10
     830:	b2c0      	uxtb	r0, r0
}
     832:	4770      	bx	lr
     834:	bdfff800 	.word	0xbdfff800

00000838 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     838:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
     83a:	07db      	lsls	r3, r3, #31
     83c:	d408      	bmi.n	850 <_spi_sync_enable+0x18>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     83e:	6803      	ldr	r3, [r0, #0]
     840:	2202      	movs	r2, #2
     842:	4313      	orrs	r3, r2
     844:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     846:	69c3      	ldr	r3, [r0, #28]
     848:	079b      	lsls	r3, r3, #30
     84a:	d1fc      	bne.n	846 <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
     84c:	2000      	movs	r0, #0
}
     84e:	4770      	bx	lr
		return ERR_BUSY;
     850:	2004      	movs	r0, #4
     852:	4240      	negs	r0, r0
     854:	e7fb      	b.n	84e <_spi_sync_enable+0x16>
	...

00000858 <_get_sercom_index>:
{
     858:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     85a:	4b0b      	ldr	r3, [pc, #44]	; (888 <_get_sercom_index+0x30>)
     85c:	4798      	blx	r3
     85e:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     860:	2000      	movs	r0, #0
     862:	2800      	cmp	r0, #0
     864:	d006      	beq.n	874 <_get_sercom_index+0x1c>
	ASSERT(false);
     866:	4a09      	ldr	r2, [pc, #36]	; (88c <_get_sercom_index+0x34>)
     868:	4909      	ldr	r1, [pc, #36]	; (890 <_get_sercom_index+0x38>)
     86a:	2000      	movs	r0, #0
     86c:	4b09      	ldr	r3, [pc, #36]	; (894 <_get_sercom_index+0x3c>)
     86e:	4798      	blx	r3
	return 0;
     870:	2000      	movs	r0, #0
}
     872:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
     874:	0083      	lsls	r3, r0, #2
     876:	181b      	adds	r3, r3, r0
     878:	0099      	lsls	r1, r3, #2
     87a:	4b07      	ldr	r3, [pc, #28]	; (898 <_get_sercom_index+0x40>)
     87c:	5ccb      	ldrb	r3, [r1, r3]
     87e:	429a      	cmp	r2, r3
     880:	d0f7      	beq.n	872 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     882:	3001      	adds	r0, #1
     884:	b2c0      	uxtb	r0, r0
     886:	e7ec      	b.n	862 <_get_sercom_index+0xa>
     888:	00000829 	.word	0x00000829
     88c:	0000023a 	.word	0x0000023a
     890:	000019d8 	.word	0x000019d8
     894:	00000775 	.word	0x00000775
     898:	00001988 	.word	0x00001988

0000089c <_usart_init>:
{
     89c:	b570      	push	{r4, r5, r6, lr}
     89e:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     8a0:	4b38      	ldr	r3, [pc, #224]	; (984 <_usart_init+0xe8>)
     8a2:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     8a4:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     8a6:	07db      	lsls	r3, r3, #31
     8a8:	d41d      	bmi.n	8e6 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     8aa:	0083      	lsls	r3, r0, #2
     8ac:	181b      	adds	r3, r3, r0
     8ae:	009a      	lsls	r2, r3, #2
     8b0:	4b35      	ldr	r3, [pc, #212]	; (988 <_usart_init+0xec>)
     8b2:	189b      	adds	r3, r3, r2
     8b4:	685a      	ldr	r2, [r3, #4]
     8b6:	231c      	movs	r3, #28
     8b8:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     8ba:	69e3      	ldr	r3, [r4, #28]
     8bc:	079b      	lsls	r3, r3, #30
     8be:	d1fc      	bne.n	8ba <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     8c0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     8c2:	079b      	lsls	r3, r3, #30
     8c4:	d509      	bpl.n	8da <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     8c6:	6823      	ldr	r3, [r4, #0]
     8c8:	2102      	movs	r1, #2
     8ca:	438b      	bics	r3, r1
     8cc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     8ce:	69e3      	ldr	r3, [r4, #28]
     8d0:	079b      	lsls	r3, r3, #30
     8d2:	d1fc      	bne.n	8ce <_usart_init+0x32>
     8d4:	69e3      	ldr	r3, [r4, #28]
     8d6:	079b      	lsls	r3, r3, #30
     8d8:	d4fc      	bmi.n	8d4 <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     8da:	2301      	movs	r3, #1
     8dc:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     8de:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     8e0:	69e3      	ldr	r3, [r4, #28]
     8e2:	079b      	lsls	r3, r3, #30
     8e4:	d1fc      	bne.n	8e0 <_usart_init+0x44>
     8e6:	69e3      	ldr	r3, [r4, #28]
     8e8:	07db      	lsls	r3, r3, #31
     8ea:	d4fc      	bmi.n	8e6 <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     8ec:	0083      	lsls	r3, r0, #2
     8ee:	181b      	adds	r3, r3, r0
     8f0:	009a      	lsls	r2, r3, #2
     8f2:	4b25      	ldr	r3, [pc, #148]	; (988 <_usart_init+0xec>)
     8f4:	189b      	adds	r3, r3, r2
     8f6:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     8f8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     8fa:	69e3      	ldr	r3, [r4, #28]
     8fc:	079b      	lsls	r3, r3, #30
     8fe:	d1fc      	bne.n	8fa <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     900:	0083      	lsls	r3, r0, #2
     902:	181b      	adds	r3, r3, r0
     904:	009a      	lsls	r2, r3, #2
     906:	4b20      	ldr	r3, [pc, #128]	; (988 <_usart_init+0xec>)
     908:	189b      	adds	r3, r3, r2
     90a:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     90c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     90e:	69e3      	ldr	r3, [r4, #28]
     910:	075b      	lsls	r3, r3, #29
     912:	d1fc      	bne.n	90e <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     914:	0083      	lsls	r3, r0, #2
     916:	181b      	adds	r3, r3, r0
     918:	009a      	lsls	r2, r3, #2
     91a:	4b1b      	ldr	r3, [pc, #108]	; (988 <_usart_init+0xec>)
     91c:	189b      	adds	r3, r3, r2
     91e:	685b      	ldr	r3, [r3, #4]
     920:	049a      	lsls	r2, r3, #18
     922:	d40b      	bmi.n	93c <_usart_init+0xa0>
     924:	22c0      	movs	r2, #192	; 0xc0
     926:	01d2      	lsls	r2, r2, #7
     928:	4213      	tst	r3, r2
     92a:	d107      	bne.n	93c <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     92c:	0083      	lsls	r3, r0, #2
     92e:	181b      	adds	r3, r3, r0
     930:	009a      	lsls	r2, r3, #2
     932:	4b15      	ldr	r3, [pc, #84]	; (988 <_usart_init+0xec>)
     934:	189b      	adds	r3, r3, r2
     936:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     938:	81a3      	strh	r3, [r4, #12]
     93a:	e015      	b.n	968 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     93c:	0083      	lsls	r3, r0, #2
     93e:	181b      	adds	r3, r3, r0
     940:	009a      	lsls	r2, r3, #2
     942:	4911      	ldr	r1, [pc, #68]	; (988 <_usart_init+0xec>)
     944:	1889      	adds	r1, r1, r2
     946:	898a      	ldrh	r2, [r1, #12]
     948:	89a3      	ldrh	r3, [r4, #12]
     94a:	04d2      	lsls	r2, r2, #19
     94c:	0cd2      	lsrs	r2, r2, #19
     94e:	0b5b      	lsrs	r3, r3, #13
     950:	035b      	lsls	r3, r3, #13
     952:	4313      	orrs	r3, r2
     954:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     956:	7b8b      	ldrb	r3, [r1, #14]
     958:	2207      	movs	r2, #7
     95a:	401a      	ands	r2, r3
     95c:	89a3      	ldrh	r3, [r4, #12]
     95e:	0352      	lsls	r2, r2, #13
     960:	04db      	lsls	r3, r3, #19
     962:	0cdb      	lsrs	r3, r3, #19
     964:	4313      	orrs	r3, r2
     966:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     968:	4a07      	ldr	r2, [pc, #28]	; (988 <_usart_init+0xec>)
     96a:	0083      	lsls	r3, r0, #2
     96c:	181d      	adds	r5, r3, r0
     96e:	00a9      	lsls	r1, r5, #2
     970:	000d      	movs	r5, r1
     972:	1851      	adds	r1, r2, r1
     974:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     976:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     978:	1952      	adds	r2, r2, r5
     97a:	7c12      	ldrb	r2, [r2, #16]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     97c:	2330      	movs	r3, #48	; 0x30
     97e:	54e2      	strb	r2, [r4, r3]
}
     980:	2000      	movs	r0, #0
     982:	bd70      	pop	{r4, r5, r6, pc}
     984:	00000859 	.word	0x00000859
     988:	00001988 	.word	0x00001988

0000098c <_usart_sync_init>:
{
     98c:	b570      	push	{r4, r5, r6, lr}
     98e:	0005      	movs	r5, r0
     990:	000c      	movs	r4, r1
	ASSERT(device);
     992:	1e43      	subs	r3, r0, #1
     994:	4198      	sbcs	r0, r3
     996:	b2c0      	uxtb	r0, r0
     998:	22b4      	movs	r2, #180	; 0xb4
     99a:	4904      	ldr	r1, [pc, #16]	; (9ac <_usart_sync_init+0x20>)
     99c:	4b04      	ldr	r3, [pc, #16]	; (9b0 <_usart_sync_init+0x24>)
     99e:	4798      	blx	r3
	device->hw = hw;
     9a0:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     9a2:	0020      	movs	r0, r4
     9a4:	4b03      	ldr	r3, [pc, #12]	; (9b4 <_usart_sync_init+0x28>)
     9a6:	4798      	blx	r3
}
     9a8:	bd70      	pop	{r4, r5, r6, pc}
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	000019d8 	.word	0x000019d8
     9b0:	00000775 	.word	0x00000775
     9b4:	0000089d 	.word	0x0000089d

000009b8 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     9b8:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     9ba:	6813      	ldr	r3, [r2, #0]
     9bc:	2102      	movs	r1, #2
     9be:	430b      	orrs	r3, r1
     9c0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     9c2:	69d3      	ldr	r3, [r2, #28]
     9c4:	079b      	lsls	r3, r3, #30
     9c6:	d1fc      	bne.n	9c2 <_usart_sync_enable+0xa>
}
     9c8:	4770      	bx	lr

000009ca <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     9ca:	6803      	ldr	r3, [r0, #0]
     9cc:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     9ce:	8519      	strh	r1, [r3, #40]	; 0x28
}
     9d0:	4770      	bx	lr

000009d2 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     9d2:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     9d4:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     9d6:	b2c0      	uxtb	r0, r0
}
     9d8:	4770      	bx	lr

000009da <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     9da:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     9dc:	7e18      	ldrb	r0, [r3, #24]
     9de:	2301      	movs	r3, #1
     9e0:	4018      	ands	r0, r3
}
     9e2:	4770      	bx	lr

000009e4 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     9e4:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     9e6:	7e1b      	ldrb	r3, [r3, #24]
     9e8:	085b      	lsrs	r3, r3, #1
     9ea:	2001      	movs	r0, #1
     9ec:	4018      	ands	r0, r3
}
     9ee:	4770      	bx	lr

000009f0 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     9f0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     9f2:	7e1b      	ldrb	r3, [r3, #24]
     9f4:	089b      	lsrs	r3, r3, #2
     9f6:	2001      	movs	r0, #1
     9f8:	4018      	ands	r0, r3
}
     9fa:	4770      	bx	lr

000009fc <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
     9fc:	b570      	push	{r4, r5, r6, lr}
     9fe:	0006      	movs	r6, r0
     a00:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
     a02:	0008      	movs	r0, r1
     a04:	4b71      	ldr	r3, [pc, #452]	; (bcc <_spi_m_sync_init+0x1d0>)
     a06:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
     a08:	2300      	movs	r3, #0
     a0a:	2b00      	cmp	r3, #0
     a0c:	d100      	bne.n	a10 <_spi_m_sync_init+0x14>
     a0e:	e084      	b.n	b1a <_spi_m_sync_init+0x11e>
	return NULL;
     a10:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
     a12:	2e00      	cmp	r6, #0
     a14:	d100      	bne.n	a18 <_spi_m_sync_init+0x1c>
     a16:	e08d      	b.n	b34 <_spi_m_sync_init+0x138>
     a18:	2c00      	cmp	r4, #0
     a1a:	d100      	bne.n	a1e <_spi_m_sync_init+0x22>
     a1c:	e088      	b.n	b30 <_spi_m_sync_init+0x134>
     a1e:	2001      	movs	r0, #1
     a20:	4a6b      	ldr	r2, [pc, #428]	; (bd0 <_spi_m_sync_init+0x1d4>)
     a22:	496c      	ldr	r1, [pc, #432]	; (bd4 <_spi_m_sync_init+0x1d8>)
     a24:	4b6c      	ldr	r3, [pc, #432]	; (bd8 <_spi_m_sync_init+0x1dc>)
     a26:	4798      	blx	r3

	if (regs == NULL) {
     a28:	2d00      	cmp	r5, #0
     a2a:	d100      	bne.n	a2e <_spi_m_sync_init+0x32>
     a2c:	e0cb      	b.n	bc6 <_spi_m_sync_init+0x1ca>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     a2e:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
     a30:	07db      	lsls	r3, r3, #31
     a32:	d421      	bmi.n	a78 <_spi_m_sync_init+0x7c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
     a34:	782a      	ldrb	r2, [r5, #0]
     a36:	786b      	ldrb	r3, [r5, #1]
     a38:	021b      	lsls	r3, r3, #8
     a3a:	4313      	orrs	r3, r2
     a3c:	78aa      	ldrb	r2, [r5, #2]
     a3e:	0412      	lsls	r2, r2, #16
     a40:	4313      	orrs	r3, r2
     a42:	78ea      	ldrb	r2, [r5, #3]
     a44:	0612      	lsls	r2, r2, #24
     a46:	431a      	orrs	r2, r3
     a48:	231c      	movs	r3, #28
     a4a:	401a      	ands	r2, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     a4c:	69e3      	ldr	r3, [r4, #28]
     a4e:	079b      	lsls	r3, r3, #30
     a50:	d1fc      	bne.n	a4c <_spi_m_sync_init+0x50>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     a52:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
     a54:	079b      	lsls	r3, r3, #30
     a56:	d509      	bpl.n	a6c <_spi_m_sync_init+0x70>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     a58:	6823      	ldr	r3, [r4, #0]
     a5a:	2102      	movs	r1, #2
     a5c:	438b      	bics	r3, r1
     a5e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     a60:	69e3      	ldr	r3, [r4, #28]
     a62:	079b      	lsls	r3, r3, #30
     a64:	d1fc      	bne.n	a60 <_spi_m_sync_init+0x64>
     a66:	69e3      	ldr	r3, [r4, #28]
     a68:	079b      	lsls	r3, r3, #30
     a6a:	d4fc      	bmi.n	a66 <_spi_m_sync_init+0x6a>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
     a6c:	2301      	movs	r3, #1
     a6e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     a70:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     a72:	69e3      	ldr	r3, [r4, #28]
     a74:	079b      	lsls	r3, r3, #30
     a76:	d1fc      	bne.n	a72 <_spi_m_sync_init+0x76>
     a78:	69e3      	ldr	r3, [r4, #28]
     a7a:	07db      	lsls	r3, r3, #31
     a7c:	d4fc      	bmi.n	a78 <_spi_m_sync_init+0x7c>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
     a7e:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
     a80:	782b      	ldrb	r3, [r5, #0]
     a82:	786a      	ldrb	r2, [r5, #1]
     a84:	0212      	lsls	r2, r2, #8
     a86:	431a      	orrs	r2, r3
     a88:	78ab      	ldrb	r3, [r5, #2]
     a8a:	041b      	lsls	r3, r3, #16
     a8c:	431a      	orrs	r2, r3
     a8e:	78eb      	ldrb	r3, [r5, #3]
     a90:	061b      	lsls	r3, r3, #24
     a92:	4313      	orrs	r3, r2
     a94:	221c      	movs	r2, #28
     a96:	4013      	ands	r3, r2
     a98:	2b08      	cmp	r3, #8
     a9a:	d04d      	beq.n	b38 <_spi_m_sync_init+0x13c>
	ASSERT(hw && regs);
     a9c:	2c00      	cmp	r4, #0
     a9e:	d100      	bne.n	aa2 <_spi_m_sync_init+0xa6>
     aa0:	e08d      	b.n	bbe <_spi_m_sync_init+0x1c2>
     aa2:	2d00      	cmp	r5, #0
     aa4:	d100      	bne.n	aa8 <_spi_m_sync_init+0xac>
     aa6:	e088      	b.n	bba <_spi_m_sync_init+0x1be>
     aa8:	2001      	movs	r0, #1
     aaa:	4a4c      	ldr	r2, [pc, #304]	; (bdc <_spi_m_sync_init+0x1e0>)
     aac:	4949      	ldr	r1, [pc, #292]	; (bd4 <_spi_m_sync_init+0x1d8>)
     aae:	4b4a      	ldr	r3, [pc, #296]	; (bd8 <_spi_m_sync_init+0x1dc>)
     ab0:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
     ab2:	782b      	ldrb	r3, [r5, #0]
     ab4:	786a      	ldrb	r2, [r5, #1]
     ab6:	0212      	lsls	r2, r2, #8
     ab8:	431a      	orrs	r2, r3
     aba:	78ab      	ldrb	r3, [r5, #2]
     abc:	041b      	lsls	r3, r3, #16
     abe:	431a      	orrs	r2, r3
     ac0:	78eb      	ldrb	r3, [r5, #3]
     ac2:	061b      	lsls	r3, r3, #24
     ac4:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
     ac6:	4a46      	ldr	r2, [pc, #280]	; (be0 <_spi_m_sync_init+0x1e4>)
     ac8:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     aca:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     acc:	69e3      	ldr	r3, [r4, #28]
     ace:	079b      	lsls	r3, r3, #30
     ad0:	d1fc      	bne.n	acc <_spi_m_sync_init+0xd0>
	    (regs->ctrlb
     ad2:	792b      	ldrb	r3, [r5, #4]
     ad4:	796a      	ldrb	r2, [r5, #5]
     ad6:	0212      	lsls	r2, r2, #8
     ad8:	431a      	orrs	r2, r3
     ada:	79ab      	ldrb	r3, [r5, #6]
     adc:	041b      	lsls	r3, r3, #16
     ade:	431a      	orrs	r2, r3
     ae0:	79eb      	ldrb	r3, [r5, #7]
     ae2:	061b      	lsls	r3, r3, #24
     ae4:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
     ae6:	4a3f      	ldr	r2, [pc, #252]	; (be4 <_spi_m_sync_init+0x1e8>)
     ae8:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
     aea:	2280      	movs	r2, #128	; 0x80
     aec:	0292      	lsls	r2, r2, #10
     aee:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
     af0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     af2:	69e3      	ldr	r3, [r4, #28]
     af4:	075b      	lsls	r3, r3, #29
     af6:	d1fc      	bne.n	af2 <_spi_m_sync_init+0xf6>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
     af8:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
     afa:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
     afc:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
     afe:	2330      	movs	r3, #48	; 0x30
     b00:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
     b02:	792b      	ldrb	r3, [r5, #4]
     b04:	075b      	lsls	r3, r3, #29
     b06:	d15c      	bne.n	bc2 <_spi_m_sync_init+0x1c6>
     b08:	2301      	movs	r3, #1
     b0a:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
     b0c:	7baa      	ldrb	r2, [r5, #14]
     b0e:	7beb      	ldrb	r3, [r5, #15]
     b10:	021b      	lsls	r3, r3, #8
     b12:	4313      	orrs	r3, r2
     b14:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
     b16:	2000      	movs	r0, #0
}
     b18:	bd70      	pop	{r4, r5, r6, pc}
		if (sercomspi_regs[i].n == n) {
     b1a:	2800      	cmp	r0, #0
     b1c:	d002      	beq.n	b24 <_spi_m_sync_init+0x128>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
     b1e:	3301      	adds	r3, #1
     b20:	b2db      	uxtb	r3, r3
     b22:	e772      	b.n	a0a <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
     b24:	011d      	lsls	r5, r3, #4
     b26:	18ea      	adds	r2, r5, r3
     b28:	4d2f      	ldr	r5, [pc, #188]	; (be8 <_spi_m_sync_init+0x1ec>)
     b2a:	353c      	adds	r5, #60	; 0x3c
     b2c:	18ad      	adds	r5, r5, r2
     b2e:	e770      	b.n	a12 <_spi_m_sync_init+0x16>
	ASSERT(dev && hw);
     b30:	2000      	movs	r0, #0
     b32:	e775      	b.n	a20 <_spi_m_sync_init+0x24>
     b34:	2000      	movs	r0, #0
     b36:	e773      	b.n	a20 <_spi_m_sync_init+0x24>
	ASSERT(hw && regs);
     b38:	2c00      	cmp	r4, #0
     b3a:	d03c      	beq.n	bb6 <_spi_m_sync_init+0x1ba>
     b3c:	2d00      	cmp	r5, #0
     b3e:	d038      	beq.n	bb2 <_spi_m_sync_init+0x1b6>
     b40:	2001      	movs	r0, #1
     b42:	4a2a      	ldr	r2, [pc, #168]	; (bec <_spi_m_sync_init+0x1f0>)
     b44:	4923      	ldr	r1, [pc, #140]	; (bd4 <_spi_m_sync_init+0x1d8>)
     b46:	4b24      	ldr	r3, [pc, #144]	; (bd8 <_spi_m_sync_init+0x1dc>)
     b48:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
     b4a:	782b      	ldrb	r3, [r5, #0]
     b4c:	786a      	ldrb	r2, [r5, #1]
     b4e:	0212      	lsls	r2, r2, #8
     b50:	431a      	orrs	r2, r3
     b52:	78ab      	ldrb	r3, [r5, #2]
     b54:	041b      	lsls	r3, r3, #16
     b56:	431a      	orrs	r2, r3
     b58:	78eb      	ldrb	r3, [r5, #3]
     b5a:	061b      	lsls	r3, r3, #24
     b5c:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
     b5e:	4a20      	ldr	r2, [pc, #128]	; (be0 <_spi_m_sync_init+0x1e4>)
     b60:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     b62:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     b64:	69e3      	ldr	r3, [r4, #28]
     b66:	079b      	lsls	r3, r3, #30
     b68:	d1fc      	bne.n	b64 <_spi_m_sync_init+0x168>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
     b6a:	792b      	ldrb	r3, [r5, #4]
     b6c:	796a      	ldrb	r2, [r5, #5]
     b6e:	0212      	lsls	r2, r2, #8
     b70:	431a      	orrs	r2, r3
     b72:	79ab      	ldrb	r3, [r5, #6]
     b74:	041b      	lsls	r3, r3, #16
     b76:	431a      	orrs	r2, r3
     b78:	79eb      	ldrb	r3, [r5, #7]
     b7a:	061b      	lsls	r3, r3, #24
     b7c:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
     b7e:	4a1c      	ldr	r2, [pc, #112]	; (bf0 <_spi_m_sync_init+0x1f4>)
     b80:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
     b82:	4a1c      	ldr	r2, [pc, #112]	; (bf4 <_spi_m_sync_init+0x1f8>)
     b84:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
     b86:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     b88:	69e3      	ldr	r3, [r4, #28]
     b8a:	075b      	lsls	r3, r3, #29
     b8c:	d1fc      	bne.n	b88 <_spi_m_sync_init+0x18c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
     b8e:	7a2b      	ldrb	r3, [r5, #8]
     b90:	7a6a      	ldrb	r2, [r5, #9]
     b92:	0212      	lsls	r2, r2, #8
     b94:	431a      	orrs	r2, r3
     b96:	7aab      	ldrb	r3, [r5, #10]
     b98:	041b      	lsls	r3, r3, #16
     b9a:	431a      	orrs	r2, r3
     b9c:	7aeb      	ldrb	r3, [r5, #11]
     b9e:	061b      	lsls	r3, r3, #24
     ba0:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
     ba2:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
     ba4:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
     ba6:	2330      	movs	r3, #48	; 0x30
     ba8:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     baa:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
     bac:	2b00      	cmp	r3, #0
     bae:	d1fc      	bne.n	baa <_spi_m_sync_init+0x1ae>
     bb0:	e7a7      	b.n	b02 <_spi_m_sync_init+0x106>
	ASSERT(hw && regs);
     bb2:	2000      	movs	r0, #0
     bb4:	e7c5      	b.n	b42 <_spi_m_sync_init+0x146>
     bb6:	2000      	movs	r0, #0
     bb8:	e7c3      	b.n	b42 <_spi_m_sync_init+0x146>
	ASSERT(hw && regs);
     bba:	2000      	movs	r0, #0
     bbc:	e775      	b.n	aaa <_spi_m_sync_init+0xae>
     bbe:	2000      	movs	r0, #0
     bc0:	e773      	b.n	aaa <_spi_m_sync_init+0xae>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
     bc2:	2302      	movs	r3, #2
     bc4:	e7a1      	b.n	b0a <_spi_m_sync_init+0x10e>
		return ERR_INVALID_ARG;
     bc6:	200d      	movs	r0, #13
     bc8:	4240      	negs	r0, r0
     bca:	e7a5      	b.n	b18 <_spi_m_sync_init+0x11c>
     bcc:	00000829 	.word	0x00000829
     bd0:	00000925 	.word	0x00000925
     bd4:	000019d8 	.word	0x000019d8
     bd8:	00000775 	.word	0x00000775
     bdc:	000008ef 	.word	0x000008ef
     be0:	fffffefc 	.word	0xfffffefc
     be4:	fffd1dbf 	.word	0xfffd1dbf
     be8:	00001988 	.word	0x00001988
     bec:	00000903 	.word	0x00000903
     bf0:	fffdddbf 	.word	0xfffdddbf
     bf4:	00020240 	.word	0x00020240

00000bf8 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
     bf8:	b510      	push	{r4, lr}
     bfa:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
     bfc:	d00e      	beq.n	c1c <_spi_m_sync_enable+0x24>
     bfe:	6803      	ldr	r3, [r0, #0]
     c00:	2b00      	cmp	r3, #0
     c02:	d009      	beq.n	c18 <_spi_m_sync_enable+0x20>
     c04:	2001      	movs	r0, #1
     c06:	2298      	movs	r2, #152	; 0x98
     c08:	0112      	lsls	r2, r2, #4
     c0a:	4905      	ldr	r1, [pc, #20]	; (c20 <_spi_m_sync_enable+0x28>)
     c0c:	4b05      	ldr	r3, [pc, #20]	; (c24 <_spi_m_sync_enable+0x2c>)
     c0e:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
     c10:	6820      	ldr	r0, [r4, #0]
     c12:	4b05      	ldr	r3, [pc, #20]	; (c28 <_spi_m_sync_enable+0x30>)
     c14:	4798      	blx	r3
}
     c16:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
     c18:	2000      	movs	r0, #0
     c1a:	e7f4      	b.n	c06 <_spi_m_sync_enable+0xe>
     c1c:	2000      	movs	r0, #0
     c1e:	e7f2      	b.n	c06 <_spi_m_sync_enable+0xe>
     c20:	000019d8 	.word	0x000019d8
     c24:	00000775 	.word	0x00000775
     c28:	00000839 	.word	0x00000839

00000c2c <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
     c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c2e:	46ce      	mov	lr, r9
     c30:	4647      	mov	r7, r8
     c32:	b580      	push	{r7, lr}
     c34:	b089      	sub	sp, #36	; 0x24
     c36:	4681      	mov	r9, r0
     c38:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
     c3a:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
     c3c:	680b      	ldr	r3, [r1, #0]
     c3e:	9303      	str	r3, [sp, #12]
     c40:	684b      	ldr	r3, [r1, #4]
     c42:	9304      	str	r3, [sp, #16]
     c44:	2300      	movs	r3, #0
     c46:	9305      	str	r3, [sp, #20]
     c48:	9306      	str	r3, [sp, #24]
     c4a:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
     c4c:	2800      	cmp	r0, #0
     c4e:	d014      	beq.n	c7a <_spi_m_sync_trans+0x4e>
     c50:	2c00      	cmp	r4, #0
     c52:	d010      	beq.n	c76 <_spi_m_sync_trans+0x4a>
     c54:	2001      	movs	r0, #1
     c56:	4a37      	ldr	r2, [pc, #220]	; (d34 <_spi_m_sync_trans+0x108>)
     c58:	4937      	ldr	r1, [pc, #220]	; (d38 <_spi_m_sync_trans+0x10c>)
     c5a:	4b38      	ldr	r3, [pc, #224]	; (d3c <_spi_m_sync_trans+0x110>)
     c5c:	4798      	blx	r3
     c5e:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
     c60:	075b      	lsls	r3, r3, #29
     c62:	d164      	bne.n	d2e <_spi_m_sync_trans+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     c64:	69e3      	ldr	r3, [r4, #28]
     c66:	079b      	lsls	r3, r3, #30
     c68:	d1fc      	bne.n	c64 <_spi_m_sync_trans+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
     c6a:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
     c6c:	079b      	lsls	r3, r3, #30
     c6e:	d420      	bmi.n	cb2 <_spi_m_sync_trans+0x86>
		return ERR_NOT_INITIALIZED;
     c70:	2014      	movs	r0, #20
     c72:	4240      	negs	r0, r0
     c74:	e056      	b.n	d24 <_spi_m_sync_trans+0xf8>
	ASSERT(dev && hw);
     c76:	2000      	movs	r0, #0
     c78:	e7ed      	b.n	c56 <_spi_m_sync_trans+0x2a>
     c7a:	2000      	movs	r0, #0
     c7c:	e7eb      	b.n	c56 <_spi_m_sync_trans+0x2a>
		return false;
     c7e:	2200      	movs	r2, #0
     c80:	e02d      	b.n	cde <_spi_m_sync_trans+0xb2>
			data |= (*ctrl->txbuf) << 8;
     c82:	7848      	ldrb	r0, [r1, #1]
     c84:	0200      	lsls	r0, r0, #8
     c86:	4647      	mov	r7, r8
     c88:	4307      	orrs	r7, r0
     c8a:	46b8      	mov	r8, r7
			ctrl->txbuf++;
     c8c:	3102      	adds	r1, #2
     c8e:	9103      	str	r1, [sp, #12]
	ctrl->txcnt++;
     c90:	3201      	adds	r2, #1
     c92:	9205      	str	r2, [sp, #20]
	((Sercom *)hw)->SPI.DATA.reg = data;
     c94:	4642      	mov	r2, r8
     c96:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
     c98:	b25b      	sxtb	r3, r3
     c9a:	2b00      	cmp	r3, #0
     c9c:	db35      	blt.n	d0a <_spi_m_sync_trans+0xde>
	return ERR_NONE;
     c9e:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
     ca0:	2800      	cmp	r0, #0
     ca2:	db3a      	blt.n	d1a <_spi_m_sync_trans+0xee>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
     ca4:	9805      	ldr	r0, [sp, #20]
     ca6:	68ab      	ldr	r3, [r5, #8]
     ca8:	4298      	cmp	r0, r3
     caa:	d302      	bcc.n	cb2 <_spi_m_sync_trans+0x86>
     cac:	9a06      	ldr	r2, [sp, #24]
     cae:	4293      	cmp	r3, r2
     cb0:	d933      	bls.n	d1a <_spi_m_sync_trans+0xee>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
     cb2:	7e23      	ldrb	r3, [r4, #24]
     cb4:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
     cb6:	075a      	lsls	r2, r3, #29
     cb8:	d5e1      	bpl.n	c7e <_spi_m_sync_trans+0x52>
	return ((Sercom *)hw)->SPI.DATA.reg;
     cba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
     cbc:	9a04      	ldr	r2, [sp, #16]
     cbe:	2a00      	cmp	r2, #0
     cc0:	d008      	beq.n	cd4 <_spi_m_sync_trans+0xa8>
		*ctrl->rxbuf++ = (uint8_t)data;
     cc2:	1c50      	adds	r0, r2, #1
     cc4:	9004      	str	r0, [sp, #16]
     cc6:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
     cc8:	2e01      	cmp	r6, #1
     cca:	d903      	bls.n	cd4 <_spi_m_sync_trans+0xa8>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
     ccc:	1c90      	adds	r0, r2, #2
     cce:	9004      	str	r0, [sp, #16]
     cd0:	0a09      	lsrs	r1, r1, #8
     cd2:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
     cd4:	9a06      	ldr	r2, [sp, #24]
     cd6:	9201      	str	r2, [sp, #4]
     cd8:	3201      	adds	r2, #1
     cda:	9206      	str	r2, [sp, #24]
	return true;
     cdc:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
     cde:	2a00      	cmp	r2, #0
     ce0:	d1da      	bne.n	c98 <_spi_m_sync_trans+0x6c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
     ce2:	9906      	ldr	r1, [sp, #24]
     ce4:	9a05      	ldr	r2, [sp, #20]
     ce6:	4291      	cmp	r1, r2
     ce8:	d3d6      	bcc.n	c98 <_spi_m_sync_trans+0x6c>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
     cea:	4649      	mov	r1, r9
     cec:	88c8      	ldrh	r0, [r1, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
     cee:	07d9      	lsls	r1, r3, #31
     cf0:	d5d2      	bpl.n	c98 <_spi_m_sync_trans+0x6c>
	if (ctrl->txbuf) {
     cf2:	9903      	ldr	r1, [sp, #12]
     cf4:	2900      	cmp	r1, #0
     cf6:	d006      	beq.n	d06 <_spi_m_sync_trans+0xda>
		data = *ctrl->txbuf++;
     cf8:	1c48      	adds	r0, r1, #1
     cfa:	9003      	str	r0, [sp, #12]
     cfc:	7808      	ldrb	r0, [r1, #0]
     cfe:	4680      	mov	r8, r0
		if (ctrl->char_size > 1) {
     d00:	2e01      	cmp	r6, #1
     d02:	d8be      	bhi.n	c82 <_spi_m_sync_trans+0x56>
     d04:	e7c4      	b.n	c90 <_spi_m_sync_trans+0x64>
		data = dummy;
     d06:	4680      	mov	r8, r0
     d08:	e7c2      	b.n	c90 <_spi_m_sync_trans+0x64>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
     d0a:	2301      	movs	r3, #1
     d0c:	425b      	negs	r3, r3
     d0e:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     d10:	3381      	adds	r3, #129	; 0x81
     d12:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
     d14:	2013      	movs	r0, #19
     d16:	4240      	negs	r0, r0
     d18:	e7c2      	b.n	ca0 <_spi_m_sync_trans+0x74>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
     d1a:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
     d1c:	079b      	lsls	r3, r3, #30
     d1e:	d0fc      	beq.n	d1a <_spi_m_sync_trans+0xee>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
     d20:	2303      	movs	r3, #3
     d22:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
     d24:	b009      	add	sp, #36	; 0x24
     d26:	bc0c      	pop	{r2, r3}
     d28:	4690      	mov	r8, r2
     d2a:	4699      	mov	r9, r3
     d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
     d2e:	2004      	movs	r0, #4
     d30:	4240      	negs	r0, r0
     d32:	e7f7      	b.n	d24 <_spi_m_sync_trans+0xf8>
     d34:	00000a85 	.word	0x00000a85
     d38:	000019d8 	.word	0x000019d8
     d3c:	00000775 	.word	0x00000775

00000d40 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     d40:	4b0f      	ldr	r3, [pc, #60]	; (d80 <_sysctrl_init_sources+0x40>)
     d42:	6a19      	ldr	r1, [r3, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
     d44:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     d46:	6a1a      	ldr	r2, [r3, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     d48:	0f92      	lsrs	r2, r2, #30
     d4a:	0792      	lsls	r2, r2, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     d4c:	0409      	lsls	r1, r1, #16
     d4e:	480d      	ldr	r0, [pc, #52]	; (d84 <_sysctrl_init_sources+0x44>)
     d50:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     d52:	430a      	orrs	r2, r1
	hri_sysctrl_write_OSC8M_reg(hw,
     d54:	490c      	ldr	r1, [pc, #48]	; (d88 <_sysctrl_init_sources+0x48>)
     d56:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     d58:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     d5a:	699a      	ldr	r2, [r3, #24]
     d5c:	2102      	movs	r1, #2
     d5e:	430a      	orrs	r2, r1
     d60:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     d62:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     d64:	311d      	adds	r1, #29
     d66:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     d68:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     d6a:	4b05      	ldr	r3, [pc, #20]	; (d80 <_sysctrl_init_sources+0x40>)
     d6c:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     d6e:	071b      	lsls	r3, r3, #28
     d70:	d5fb      	bpl.n	d6a <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     d72:	4a03      	ldr	r2, [pc, #12]	; (d80 <_sysctrl_init_sources+0x40>)
     d74:	6a13      	ldr	r3, [r2, #32]
     d76:	2180      	movs	r1, #128	; 0x80
     d78:	430b      	orrs	r3, r1
     d7a:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     d7c:	4770      	bx	lr
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	40000800 	.word	0x40000800
     d84:	0fff0000 	.word	0x0fff0000
     d88:	00000302 	.word	0x00000302

00000d8c <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
     d8c:	4a02      	ldr	r2, [pc, #8]	; (d98 <_sysctrl_init_referenced_generators+0xc>)
     d8e:	6993      	ldr	r3, [r2, #24]
     d90:	2102      	movs	r1, #2
     d92:	438b      	bics	r3, r1
     d94:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     d96:	4770      	bx	lr
     d98:	40000800 	.word	0x40000800

00000d9c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
     d9c:	4b02      	ldr	r3, [pc, #8]	; (da8 <_system_time_init+0xc>)
     d9e:	4a03      	ldr	r2, [pc, #12]	; (dac <_system_time_init+0x10>)
     da0:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
     da2:	2205      	movs	r2, #5
     da4:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
     da6:	4770      	bx	lr
     da8:	e000e010 	.word	0xe000e010
     dac:	00ffffff 	.word	0x00ffffff

00000db0 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
     db0:	b510      	push	{r4, lr}
	_system_time_init(hw);
     db2:	4b01      	ldr	r3, [pc, #4]	; (db8 <_delay_init+0x8>)
     db4:	4798      	blx	r3
}
     db6:	bd10      	pop	{r4, pc}
     db8:	00000d9d 	.word	0x00000d9d

00000dbc <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
     dbc:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
     dbe:	e00b      	b.n	dd8 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
     dc0:	4b0b      	ldr	r3, [pc, #44]	; (df0 <_delay_cycles+0x34>)
     dc2:	480c      	ldr	r0, [pc, #48]	; (df4 <_delay_cycles+0x38>)
     dc4:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
     dc6:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     dc8:	4b09      	ldr	r3, [pc, #36]	; (df0 <_delay_cycles+0x34>)
     dca:	681b      	ldr	r3, [r3, #0]
     dcc:	03db      	lsls	r3, r3, #15
     dce:	d5fb      	bpl.n	dc8 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
     dd0:	4b09      	ldr	r3, [pc, #36]	; (df8 <_delay_cycles+0x3c>)
     dd2:	469c      	mov	ip, r3
     dd4:	4461      	add	r1, ip
	while (n--) {
     dd6:	0010      	movs	r0, r2
     dd8:	1e42      	subs	r2, r0, #1
     dda:	b2d2      	uxtb	r2, r2
     ddc:	2800      	cmp	r0, #0
     dde:	d1ef      	bne.n	dc0 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
     de0:	4b03      	ldr	r3, [pc, #12]	; (df0 <_delay_cycles+0x34>)
     de2:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
     de4:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
     de6:	4b02      	ldr	r3, [pc, #8]	; (df0 <_delay_cycles+0x34>)
     de8:	681b      	ldr	r3, [r3, #0]
     dea:	03db      	lsls	r3, r3, #15
     dec:	d5fb      	bpl.n	de6 <_delay_cycles+0x2a>
		;
}
     dee:	4770      	bx	lr
     df0:	e000e010 	.word	0xe000e010
     df4:	00ffffff 	.word	0x00ffffff
     df8:	ff000001 	.word	0xff000001

00000dfc <send_iso_command>:
 * @brief Sends commands to both daisy-chained ISO1H816G chips.
 * @param command_k2 The 8-bit command for the chip controlling the K2 connector.
 * @param command_k1 The 8-bit command for the chip controlling the K1 connector.
 */
void send_iso_command(uint8_t command_k2, uint8_t command_k1)
{
     dfc:	b570      	push	{r4, r5, r6, lr}
     dfe:	b084      	sub	sp, #16
    uint8_t commands[2] = {command_k2, command_k1};
     e00:	ab03      	add	r3, sp, #12
     e02:	7018      	strb	r0, [r3, #0]
     e04:	7059      	strb	r1, [r3, #1]
    struct spi_xfer xfer;
    xfer.txbuf = commands;
     e06:	9300      	str	r3, [sp, #0]
    xfer.rxbuf = NULL;
     e08:	2300      	movs	r3, #0
     e0a:	9301      	str	r3, [sp, #4]
    xfer.size  = 2;
     e0c:	3302      	adds	r3, #2
     e0e:	9302      	str	r3, [sp, #8]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e10:	24c0      	movs	r4, #192	; 0xc0
     e12:	05e4      	lsls	r4, r4, #23
     e14:	2580      	movs	r5, #128	; 0x80
     e16:	6165      	str	r5, [r4, #20]

    gpio_set_pin_level(CS_PIN, false);
    delay_us(1);
     e18:	2001      	movs	r0, #1
     e1a:	4e05      	ldr	r6, [pc, #20]	; (e30 <send_iso_command+0x34>)
     e1c:	47b0      	blx	r6
    spi_m_sync_transfer(&SPI_0, &xfer);
     e1e:	4669      	mov	r1, sp
     e20:	4804      	ldr	r0, [pc, #16]	; (e34 <send_iso_command+0x38>)
     e22:	4b05      	ldr	r3, [pc, #20]	; (e38 <send_iso_command+0x3c>)
     e24:	4798      	blx	r3
    delay_us(1);
     e26:	2001      	movs	r0, #1
     e28:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e2a:	61a5      	str	r5, [r4, #24]
    gpio_set_pin_level(CS_PIN, true);
}
     e2c:	b004      	add	sp, #16
     e2e:	bd70      	pop	{r4, r5, r6, pc}
     e30:	0000044d 	.word	0x0000044d
     e34:	20000090 	.word	0x20000090
     e38:	0000055d 	.word	0x0000055d

00000e3c <parse_binary_string>:
 * @brief Parses an 8-character string of '0's and '1's into a byte.
 * @param buffer The character buffer containing the binary string.
 * @return The parsed 8-bit integer value. Returns 0 on error.
 */
uint8_t parse_binary_string(const char *buffer)
{
     e3c:	b510      	push	{r4, lr}
    uint8_t result = 0;
    for (int i = 0; i < 8; i++) {
     e3e:	2300      	movs	r3, #0
    uint8_t result = 0;
     e40:	2100      	movs	r1, #0
    for (int i = 0; i < 8; i++) {
     e42:	e006      	b.n	e52 <parse_binary_string+0x16>
        if (buffer[i] == '1') {
            result |= (1 << (7 - i));
     e44:	2407      	movs	r4, #7
     e46:	1ae4      	subs	r4, r4, r3
     e48:	3a30      	subs	r2, #48	; 0x30
     e4a:	40a2      	lsls	r2, r4
     e4c:	4311      	orrs	r1, r2
     e4e:	b2c9      	uxtb	r1, r1
    for (int i = 0; i < 8; i++) {
     e50:	3301      	adds	r3, #1
     e52:	2b07      	cmp	r3, #7
     e54:	dc05      	bgt.n	e62 <parse_binary_string+0x26>
        if (buffer[i] == '1') {
     e56:	5cc2      	ldrb	r2, [r0, r3]
     e58:	2a31      	cmp	r2, #49	; 0x31
     e5a:	d0f3      	beq.n	e44 <parse_binary_string+0x8>
        } else if (buffer[i] != '0') {
     e5c:	2a30      	cmp	r2, #48	; 0x30
     e5e:	d0f7      	beq.n	e50 <parse_binary_string+0x14>
            return 0; // Invalid character
     e60:	2100      	movs	r1, #0
        }
    }
    return result;
}
     e62:	0008      	movs	r0, r1
     e64:	bd10      	pop	{r4, pc}
	...

00000e68 <read_n_bytes>:
/**
 * @brief Reads a line of exactly n characters from the serial terminal.
 * @param buffer A pointer to the character buffer to store the input.
 * @param len The number of characters to read.
 */
void read_n_bytes(char* buffer, int len) {
     e68:	b570      	push	{r4, r5, r6, lr}
     e6a:	0006      	movs	r6, r0
     e6c:	000d      	movs	r5, r1
    int count = 0;
     e6e:	2400      	movs	r4, #0
    while (count < len) {
     e70:	42ac      	cmp	r4, r5
     e72:	da08      	bge.n	e86 <read_n_bytes+0x1e>
        // Read one character at a time
        if (io_read(&USART_0.io, (uint8_t*)&buffer[count], 1) == 1) {
     e74:	1931      	adds	r1, r6, r4
     e76:	2201      	movs	r2, #1
     e78:	4803      	ldr	r0, [pc, #12]	; (e88 <read_n_bytes+0x20>)
     e7a:	4b04      	ldr	r3, [pc, #16]	; (e8c <read_n_bytes+0x24>)
     e7c:	4798      	blx	r3
     e7e:	2801      	cmp	r0, #1
     e80:	d1f6      	bne.n	e70 <read_n_bytes+0x8>
            count++;
     e82:	3401      	adds	r4, #1
     e84:	e7f4      	b.n	e70 <read_n_bytes+0x8>
        }
    }
}
     e86:	bd70      	pop	{r4, r5, r6, pc}
     e88:	200000a8 	.word	0x200000a8
     e8c:	000004a5 	.word	0x000004a5

00000e90 <main>:

int main(void)
{
     e90:	b570      	push	{r4, r5, r6, lr}
     e92:	b094      	sub	sp, #80	; 0x50
	char k1_buffer[9] = {0}; // 8 chars + null terminator
     e94:	2209      	movs	r2, #9
     e96:	2100      	movs	r1, #0
     e98:	a811      	add	r0, sp, #68	; 0x44
     e9a:	4c27      	ldr	r4, [pc, #156]	; (f38 <main+0xa8>)
     e9c:	47a0      	blx	r4
	char k2_buffer[9] = {0};
     e9e:	2209      	movs	r2, #9
     ea0:	2100      	movs	r1, #0
     ea2:	a80e      	add	r0, sp, #56	; 0x38
     ea4:	47a0      	blx	r4
	uint8_t k1_state = 0x00;
	uint8_t k2_state = 0x00;

	atmel_start_init();
     ea6:	4b25      	ldr	r3, [pc, #148]	; (f3c <main+0xac>)
     ea8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eaa:	23c0      	movs	r3, #192	; 0xc0
     eac:	05db      	lsls	r3, r3, #23
     eae:	2180      	movs	r1, #128	; 0x80
     eb0:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eb2:	4a23      	ldr	r2, [pc, #140]	; (f40 <main+0xb0>)
     eb4:	4823      	ldr	r0, [pc, #140]	; (f44 <main+0xb4>)
     eb6:	6290      	str	r0, [r2, #40]	; 0x28
     eb8:	20c0      	movs	r0, #192	; 0xc0
     eba:	0600      	lsls	r0, r0, #24
     ebc:	6290      	str	r0, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ebe:	6199      	str	r1, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ec0:	397c      	subs	r1, #124	; 0x7c
     ec2:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ec4:	4c20      	ldr	r4, [pc, #128]	; (f48 <main+0xb8>)
     ec6:	6294      	str	r4, [r2, #40]	; 0x28
     ec8:	6290      	str	r0, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     eca:	6199      	str	r1, [r3, #24]
	gpio_set_pin_level(CS_PIN, true);
	gpio_set_pin_direction(DIS_PIN, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(DIS_PIN, true);

	// --- Initialize Peripherals ---
	spi_m_sync_enable(&SPI_0);
     ecc:	481f      	ldr	r0, [pc, #124]	; (f4c <main+0xbc>)
     ece:	4b20      	ldr	r3, [pc, #128]	; (f50 <main+0xc0>)
     ed0:	4798      	blx	r3
	usart_sync_enable(&USART_0);
     ed2:	4c20      	ldr	r4, [pc, #128]	; (f54 <main+0xc4>)
     ed4:	0020      	movs	r0, r4
     ed6:	4b20      	ldr	r3, [pc, #128]	; (f58 <main+0xc8>)
     ed8:	4798      	blx	r3

	// Initial state: Turn all channels off
	send_iso_command(0x00, 0x00);
     eda:	2100      	movs	r1, #0
     edc:	2000      	movs	r0, #0
     ede:	4b1f      	ldr	r3, [pc, #124]	; (f5c <main+0xcc>)
     ee0:	4798      	blx	r3
	
	// Send a ready message to the Python script
	io_write(&USART_0.io, (uint8_t*)"SAMD21 Ready\r\n", 15);
     ee2:	220f      	movs	r2, #15
     ee4:	491e      	ldr	r1, [pc, #120]	; (f60 <main+0xd0>)
     ee6:	0020      	movs	r0, r4
     ee8:	4b1e      	ldr	r3, [pc, #120]	; (f64 <main+0xd4>)
     eea:	4798      	blx	r3

	while (true) {
		// Wait for and read the 8 bytes for K1
		read_n_bytes(k1_buffer, 8);
     eec:	2108      	movs	r1, #8
     eee:	a811      	add	r0, sp, #68	; 0x44
     ef0:	4e1d      	ldr	r6, [pc, #116]	; (f68 <main+0xd8>)
     ef2:	47b0      	blx	r6
		k1_state = parse_binary_string(k1_buffer);
     ef4:	a811      	add	r0, sp, #68	; 0x44
     ef6:	4d1d      	ldr	r5, [pc, #116]	; (f6c <main+0xdc>)
     ef8:	47a8      	blx	r5
     efa:	0004      	movs	r4, r0

		// Wait for and read the 8 bytes for K2
		read_n_bytes(k2_buffer, 8);
     efc:	2108      	movs	r1, #8
     efe:	a80e      	add	r0, sp, #56	; 0x38
     f00:	47b0      	blx	r6
		k2_state = parse_binary_string(k2_buffer);
     f02:	a80e      	add	r0, sp, #56	; 0x38
     f04:	47a8      	blx	r5
     f06:	0005      	movs	r5, r0

		// Send the new commands to the Infineon board
		send_iso_command(k2_state, k1_state);
     f08:	0021      	movs	r1, r4
     f0a:	4b14      	ldr	r3, [pc, #80]	; (f5c <main+0xcc>)
     f0c:	4798      	blx	r3

		// Send a confirmation message back to the Python script
		char confirmation_msg[50];
		sprintf(confirmation_msg, "OK: K1=0x%02X, K2=0x%02X\r\n", k1_state, k2_state);
     f0e:	002b      	movs	r3, r5
     f10:	0022      	movs	r2, r4
     f12:	4917      	ldr	r1, [pc, #92]	; (f70 <main+0xe0>)
     f14:	a801      	add	r0, sp, #4
     f16:	4c17      	ldr	r4, [pc, #92]	; (f74 <main+0xe4>)
     f18:	47a0      	blx	r4
		io_write(&USART_0.io, (uint8_t*)confirmation_msg, strlen(confirmation_msg));
     f1a:	a801      	add	r0, sp, #4
     f1c:	4b16      	ldr	r3, [pc, #88]	; (f78 <main+0xe8>)
     f1e:	4798      	blx	r3
     f20:	b282      	uxth	r2, r0
     f22:	a901      	add	r1, sp, #4
     f24:	480b      	ldr	r0, [pc, #44]	; (f54 <main+0xc4>)
     f26:	4b0f      	ldr	r3, [pc, #60]	; (f64 <main+0xd4>)
     f28:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     f2a:	2180      	movs	r1, #128	; 0x80
     f2c:	05c9      	lsls	r1, r1, #23
     f2e:	239c      	movs	r3, #156	; 0x9c
     f30:	22c0      	movs	r2, #192	; 0xc0
     f32:	05d2      	lsls	r2, r2, #23
     f34:	50d1      	str	r1, [r2, r3]
     f36:	e7d9      	b.n	eec <main+0x5c>
     f38:	000010dd 	.word	0x000010dd
     f3c:	00000115 	.word	0x00000115
     f40:	41004400 	.word	0x41004400
     f44:	40000080 	.word	0x40000080
     f48:	40000004 	.word	0x40000004
     f4c:	20000090 	.word	0x20000090
     f50:	00000535 	.word	0x00000535
     f54:	200000a8 	.word	0x200000a8
     f58:	00000749 	.word	0x00000749
     f5c:	00000dfd 	.word	0x00000dfd
     f60:	000019f4 	.word	0x000019f4
     f64:	0000046d 	.word	0x0000046d
     f68:	00000e69 	.word	0x00000e69
     f6c:	00000e3d 	.word	0x00000e3d
     f70:	00001a04 	.word	0x00001a04
     f74:	000010ed 	.word	0x000010ed
     f78:	00001131 	.word	0x00001131

00000f7c <__udivsi3>:
     f7c:	2200      	movs	r2, #0
     f7e:	0843      	lsrs	r3, r0, #1
     f80:	428b      	cmp	r3, r1
     f82:	d374      	bcc.n	106e <__udivsi3+0xf2>
     f84:	0903      	lsrs	r3, r0, #4
     f86:	428b      	cmp	r3, r1
     f88:	d35f      	bcc.n	104a <__udivsi3+0xce>
     f8a:	0a03      	lsrs	r3, r0, #8
     f8c:	428b      	cmp	r3, r1
     f8e:	d344      	bcc.n	101a <__udivsi3+0x9e>
     f90:	0b03      	lsrs	r3, r0, #12
     f92:	428b      	cmp	r3, r1
     f94:	d328      	bcc.n	fe8 <__udivsi3+0x6c>
     f96:	0c03      	lsrs	r3, r0, #16
     f98:	428b      	cmp	r3, r1
     f9a:	d30d      	bcc.n	fb8 <__udivsi3+0x3c>
     f9c:	22ff      	movs	r2, #255	; 0xff
     f9e:	0209      	lsls	r1, r1, #8
     fa0:	ba12      	rev	r2, r2
     fa2:	0c03      	lsrs	r3, r0, #16
     fa4:	428b      	cmp	r3, r1
     fa6:	d302      	bcc.n	fae <__udivsi3+0x32>
     fa8:	1212      	asrs	r2, r2, #8
     faa:	0209      	lsls	r1, r1, #8
     fac:	d065      	beq.n	107a <__udivsi3+0xfe>
     fae:	0b03      	lsrs	r3, r0, #12
     fb0:	428b      	cmp	r3, r1
     fb2:	d319      	bcc.n	fe8 <__udivsi3+0x6c>
     fb4:	e000      	b.n	fb8 <__udivsi3+0x3c>
     fb6:	0a09      	lsrs	r1, r1, #8
     fb8:	0bc3      	lsrs	r3, r0, #15
     fba:	428b      	cmp	r3, r1
     fbc:	d301      	bcc.n	fc2 <__udivsi3+0x46>
     fbe:	03cb      	lsls	r3, r1, #15
     fc0:	1ac0      	subs	r0, r0, r3
     fc2:	4152      	adcs	r2, r2
     fc4:	0b83      	lsrs	r3, r0, #14
     fc6:	428b      	cmp	r3, r1
     fc8:	d301      	bcc.n	fce <__udivsi3+0x52>
     fca:	038b      	lsls	r3, r1, #14
     fcc:	1ac0      	subs	r0, r0, r3
     fce:	4152      	adcs	r2, r2
     fd0:	0b43      	lsrs	r3, r0, #13
     fd2:	428b      	cmp	r3, r1
     fd4:	d301      	bcc.n	fda <__udivsi3+0x5e>
     fd6:	034b      	lsls	r3, r1, #13
     fd8:	1ac0      	subs	r0, r0, r3
     fda:	4152      	adcs	r2, r2
     fdc:	0b03      	lsrs	r3, r0, #12
     fde:	428b      	cmp	r3, r1
     fe0:	d301      	bcc.n	fe6 <__udivsi3+0x6a>
     fe2:	030b      	lsls	r3, r1, #12
     fe4:	1ac0      	subs	r0, r0, r3
     fe6:	4152      	adcs	r2, r2
     fe8:	0ac3      	lsrs	r3, r0, #11
     fea:	428b      	cmp	r3, r1
     fec:	d301      	bcc.n	ff2 <__udivsi3+0x76>
     fee:	02cb      	lsls	r3, r1, #11
     ff0:	1ac0      	subs	r0, r0, r3
     ff2:	4152      	adcs	r2, r2
     ff4:	0a83      	lsrs	r3, r0, #10
     ff6:	428b      	cmp	r3, r1
     ff8:	d301      	bcc.n	ffe <__udivsi3+0x82>
     ffa:	028b      	lsls	r3, r1, #10
     ffc:	1ac0      	subs	r0, r0, r3
     ffe:	4152      	adcs	r2, r2
    1000:	0a43      	lsrs	r3, r0, #9
    1002:	428b      	cmp	r3, r1
    1004:	d301      	bcc.n	100a <__udivsi3+0x8e>
    1006:	024b      	lsls	r3, r1, #9
    1008:	1ac0      	subs	r0, r0, r3
    100a:	4152      	adcs	r2, r2
    100c:	0a03      	lsrs	r3, r0, #8
    100e:	428b      	cmp	r3, r1
    1010:	d301      	bcc.n	1016 <__udivsi3+0x9a>
    1012:	020b      	lsls	r3, r1, #8
    1014:	1ac0      	subs	r0, r0, r3
    1016:	4152      	adcs	r2, r2
    1018:	d2cd      	bcs.n	fb6 <__udivsi3+0x3a>
    101a:	09c3      	lsrs	r3, r0, #7
    101c:	428b      	cmp	r3, r1
    101e:	d301      	bcc.n	1024 <__udivsi3+0xa8>
    1020:	01cb      	lsls	r3, r1, #7
    1022:	1ac0      	subs	r0, r0, r3
    1024:	4152      	adcs	r2, r2
    1026:	0983      	lsrs	r3, r0, #6
    1028:	428b      	cmp	r3, r1
    102a:	d301      	bcc.n	1030 <__udivsi3+0xb4>
    102c:	018b      	lsls	r3, r1, #6
    102e:	1ac0      	subs	r0, r0, r3
    1030:	4152      	adcs	r2, r2
    1032:	0943      	lsrs	r3, r0, #5
    1034:	428b      	cmp	r3, r1
    1036:	d301      	bcc.n	103c <__udivsi3+0xc0>
    1038:	014b      	lsls	r3, r1, #5
    103a:	1ac0      	subs	r0, r0, r3
    103c:	4152      	adcs	r2, r2
    103e:	0903      	lsrs	r3, r0, #4
    1040:	428b      	cmp	r3, r1
    1042:	d301      	bcc.n	1048 <__udivsi3+0xcc>
    1044:	010b      	lsls	r3, r1, #4
    1046:	1ac0      	subs	r0, r0, r3
    1048:	4152      	adcs	r2, r2
    104a:	08c3      	lsrs	r3, r0, #3
    104c:	428b      	cmp	r3, r1
    104e:	d301      	bcc.n	1054 <__udivsi3+0xd8>
    1050:	00cb      	lsls	r3, r1, #3
    1052:	1ac0      	subs	r0, r0, r3
    1054:	4152      	adcs	r2, r2
    1056:	0883      	lsrs	r3, r0, #2
    1058:	428b      	cmp	r3, r1
    105a:	d301      	bcc.n	1060 <__udivsi3+0xe4>
    105c:	008b      	lsls	r3, r1, #2
    105e:	1ac0      	subs	r0, r0, r3
    1060:	4152      	adcs	r2, r2
    1062:	0843      	lsrs	r3, r0, #1
    1064:	428b      	cmp	r3, r1
    1066:	d301      	bcc.n	106c <__udivsi3+0xf0>
    1068:	004b      	lsls	r3, r1, #1
    106a:	1ac0      	subs	r0, r0, r3
    106c:	4152      	adcs	r2, r2
    106e:	1a41      	subs	r1, r0, r1
    1070:	d200      	bcs.n	1074 <__udivsi3+0xf8>
    1072:	4601      	mov	r1, r0
    1074:	4152      	adcs	r2, r2
    1076:	4610      	mov	r0, r2
    1078:	4770      	bx	lr
    107a:	e7ff      	b.n	107c <__udivsi3+0x100>
    107c:	b501      	push	{r0, lr}
    107e:	2000      	movs	r0, #0
    1080:	f000 f806 	bl	1090 <__aeabi_idiv0>
    1084:	bd02      	pop	{r1, pc}
    1086:	46c0      	nop			; (mov r8, r8)

00001088 <__aeabi_uidivmod>:
    1088:	2900      	cmp	r1, #0
    108a:	d0f7      	beq.n	107c <__udivsi3+0x100>
    108c:	e776      	b.n	f7c <__udivsi3>
    108e:	4770      	bx	lr

00001090 <__aeabi_idiv0>:
    1090:	4770      	bx	lr
    1092:	46c0      	nop			; (mov r8, r8)

00001094 <__libc_init_array>:
    1094:	b570      	push	{r4, r5, r6, lr}
    1096:	2600      	movs	r6, #0
    1098:	4d0c      	ldr	r5, [pc, #48]	; (10cc <__libc_init_array+0x38>)
    109a:	4c0d      	ldr	r4, [pc, #52]	; (10d0 <__libc_init_array+0x3c>)
    109c:	1b64      	subs	r4, r4, r5
    109e:	10a4      	asrs	r4, r4, #2
    10a0:	42a6      	cmp	r6, r4
    10a2:	d109      	bne.n	10b8 <__libc_init_array+0x24>
    10a4:	2600      	movs	r6, #0
    10a6:	f000 fd05 	bl	1ab4 <_init>
    10aa:	4d0a      	ldr	r5, [pc, #40]	; (10d4 <__libc_init_array+0x40>)
    10ac:	4c0a      	ldr	r4, [pc, #40]	; (10d8 <__libc_init_array+0x44>)
    10ae:	1b64      	subs	r4, r4, r5
    10b0:	10a4      	asrs	r4, r4, #2
    10b2:	42a6      	cmp	r6, r4
    10b4:	d105      	bne.n	10c2 <__libc_init_array+0x2e>
    10b6:	bd70      	pop	{r4, r5, r6, pc}
    10b8:	00b3      	lsls	r3, r6, #2
    10ba:	58eb      	ldr	r3, [r5, r3]
    10bc:	4798      	blx	r3
    10be:	3601      	adds	r6, #1
    10c0:	e7ee      	b.n	10a0 <__libc_init_array+0xc>
    10c2:	00b3      	lsls	r3, r6, #2
    10c4:	58eb      	ldr	r3, [r5, r3]
    10c6:	4798      	blx	r3
    10c8:	3601      	adds	r6, #1
    10ca:	e7f2      	b.n	10b2 <__libc_init_array+0x1e>
    10cc:	00001ac0 	.word	0x00001ac0
    10d0:	00001ac0 	.word	0x00001ac0
    10d4:	00001ac0 	.word	0x00001ac0
    10d8:	00001ac4 	.word	0x00001ac4

000010dc <memset>:
    10dc:	0003      	movs	r3, r0
    10de:	1882      	adds	r2, r0, r2
    10e0:	4293      	cmp	r3, r2
    10e2:	d100      	bne.n	10e6 <memset+0xa>
    10e4:	4770      	bx	lr
    10e6:	7019      	strb	r1, [r3, #0]
    10e8:	3301      	adds	r3, #1
    10ea:	e7f9      	b.n	10e0 <memset+0x4>

000010ec <siprintf>:
    10ec:	b40e      	push	{r1, r2, r3}
    10ee:	b510      	push	{r4, lr}
    10f0:	b09d      	sub	sp, #116	; 0x74
    10f2:	a902      	add	r1, sp, #8
    10f4:	9002      	str	r0, [sp, #8]
    10f6:	6108      	str	r0, [r1, #16]
    10f8:	480b      	ldr	r0, [pc, #44]	; (1128 <siprintf+0x3c>)
    10fa:	2482      	movs	r4, #130	; 0x82
    10fc:	6088      	str	r0, [r1, #8]
    10fe:	6148      	str	r0, [r1, #20]
    1100:	2001      	movs	r0, #1
    1102:	4240      	negs	r0, r0
    1104:	ab1f      	add	r3, sp, #124	; 0x7c
    1106:	81c8      	strh	r0, [r1, #14]
    1108:	4808      	ldr	r0, [pc, #32]	; (112c <siprintf+0x40>)
    110a:	cb04      	ldmia	r3!, {r2}
    110c:	00a4      	lsls	r4, r4, #2
    110e:	6800      	ldr	r0, [r0, #0]
    1110:	9301      	str	r3, [sp, #4]
    1112:	818c      	strh	r4, [r1, #12]
    1114:	f000 f8d4 	bl	12c0 <_svfiprintf_r>
    1118:	2300      	movs	r3, #0
    111a:	9a02      	ldr	r2, [sp, #8]
    111c:	7013      	strb	r3, [r2, #0]
    111e:	b01d      	add	sp, #116	; 0x74
    1120:	bc10      	pop	{r4}
    1122:	bc08      	pop	{r3}
    1124:	b003      	add	sp, #12
    1126:	4718      	bx	r3
    1128:	7fffffff 	.word	0x7fffffff
    112c:	20000000 	.word	0x20000000

00001130 <strlen>:
    1130:	2300      	movs	r3, #0
    1132:	5cc2      	ldrb	r2, [r0, r3]
    1134:	3301      	adds	r3, #1
    1136:	2a00      	cmp	r2, #0
    1138:	d1fb      	bne.n	1132 <strlen+0x2>
    113a:	1e58      	subs	r0, r3, #1
    113c:	4770      	bx	lr
	...

00001140 <_malloc_r>:
    1140:	2303      	movs	r3, #3
    1142:	b570      	push	{r4, r5, r6, lr}
    1144:	1ccd      	adds	r5, r1, #3
    1146:	439d      	bics	r5, r3
    1148:	3508      	adds	r5, #8
    114a:	0006      	movs	r6, r0
    114c:	2d0c      	cmp	r5, #12
    114e:	d21e      	bcs.n	118e <_malloc_r+0x4e>
    1150:	250c      	movs	r5, #12
    1152:	42a9      	cmp	r1, r5
    1154:	d81d      	bhi.n	1192 <_malloc_r+0x52>
    1156:	0030      	movs	r0, r6
    1158:	f000 fb76 	bl	1848 <__malloc_lock>
    115c:	4a25      	ldr	r2, [pc, #148]	; (11f4 <_malloc_r+0xb4>)
    115e:	6814      	ldr	r4, [r2, #0]
    1160:	0021      	movs	r1, r4
    1162:	2900      	cmp	r1, #0
    1164:	d119      	bne.n	119a <_malloc_r+0x5a>
    1166:	4c24      	ldr	r4, [pc, #144]	; (11f8 <_malloc_r+0xb8>)
    1168:	6823      	ldr	r3, [r4, #0]
    116a:	2b00      	cmp	r3, #0
    116c:	d103      	bne.n	1176 <_malloc_r+0x36>
    116e:	0030      	movs	r0, r6
    1170:	f000 fb32 	bl	17d8 <_sbrk_r>
    1174:	6020      	str	r0, [r4, #0]
    1176:	0029      	movs	r1, r5
    1178:	0030      	movs	r0, r6
    117a:	f000 fb2d 	bl	17d8 <_sbrk_r>
    117e:	1c43      	adds	r3, r0, #1
    1180:	d12c      	bne.n	11dc <_malloc_r+0x9c>
    1182:	230c      	movs	r3, #12
    1184:	0030      	movs	r0, r6
    1186:	6033      	str	r3, [r6, #0]
    1188:	f000 fb5f 	bl	184a <__malloc_unlock>
    118c:	e003      	b.n	1196 <_malloc_r+0x56>
    118e:	2d00      	cmp	r5, #0
    1190:	dadf      	bge.n	1152 <_malloc_r+0x12>
    1192:	230c      	movs	r3, #12
    1194:	6033      	str	r3, [r6, #0]
    1196:	2000      	movs	r0, #0
    1198:	bd70      	pop	{r4, r5, r6, pc}
    119a:	680b      	ldr	r3, [r1, #0]
    119c:	1b5b      	subs	r3, r3, r5
    119e:	d41a      	bmi.n	11d6 <_malloc_r+0x96>
    11a0:	2b0b      	cmp	r3, #11
    11a2:	d903      	bls.n	11ac <_malloc_r+0x6c>
    11a4:	600b      	str	r3, [r1, #0]
    11a6:	18cc      	adds	r4, r1, r3
    11a8:	6025      	str	r5, [r4, #0]
    11aa:	e003      	b.n	11b4 <_malloc_r+0x74>
    11ac:	428c      	cmp	r4, r1
    11ae:	d10e      	bne.n	11ce <_malloc_r+0x8e>
    11b0:	6863      	ldr	r3, [r4, #4]
    11b2:	6013      	str	r3, [r2, #0]
    11b4:	0030      	movs	r0, r6
    11b6:	f000 fb48 	bl	184a <__malloc_unlock>
    11ba:	0020      	movs	r0, r4
    11bc:	2207      	movs	r2, #7
    11be:	300b      	adds	r0, #11
    11c0:	1d23      	adds	r3, r4, #4
    11c2:	4390      	bics	r0, r2
    11c4:	1ac3      	subs	r3, r0, r3
    11c6:	d0e7      	beq.n	1198 <_malloc_r+0x58>
    11c8:	425a      	negs	r2, r3
    11ca:	50e2      	str	r2, [r4, r3]
    11cc:	e7e4      	b.n	1198 <_malloc_r+0x58>
    11ce:	684b      	ldr	r3, [r1, #4]
    11d0:	6063      	str	r3, [r4, #4]
    11d2:	000c      	movs	r4, r1
    11d4:	e7ee      	b.n	11b4 <_malloc_r+0x74>
    11d6:	000c      	movs	r4, r1
    11d8:	6849      	ldr	r1, [r1, #4]
    11da:	e7c2      	b.n	1162 <_malloc_r+0x22>
    11dc:	2303      	movs	r3, #3
    11de:	1cc4      	adds	r4, r0, #3
    11e0:	439c      	bics	r4, r3
    11e2:	42a0      	cmp	r0, r4
    11e4:	d0e0      	beq.n	11a8 <_malloc_r+0x68>
    11e6:	1a21      	subs	r1, r4, r0
    11e8:	0030      	movs	r0, r6
    11ea:	f000 faf5 	bl	17d8 <_sbrk_r>
    11ee:	1c43      	adds	r3, r0, #1
    11f0:	d1da      	bne.n	11a8 <_malloc_r+0x68>
    11f2:	e7c6      	b.n	1182 <_malloc_r+0x42>
    11f4:	20000088 	.word	0x20000088
    11f8:	2000008c 	.word	0x2000008c

000011fc <__ssputs_r>:
    11fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    11fe:	688e      	ldr	r6, [r1, #8]
    1200:	b085      	sub	sp, #20
    1202:	0007      	movs	r7, r0
    1204:	000c      	movs	r4, r1
    1206:	9203      	str	r2, [sp, #12]
    1208:	9301      	str	r3, [sp, #4]
    120a:	429e      	cmp	r6, r3
    120c:	d839      	bhi.n	1282 <__ssputs_r+0x86>
    120e:	2390      	movs	r3, #144	; 0x90
    1210:	898a      	ldrh	r2, [r1, #12]
    1212:	00db      	lsls	r3, r3, #3
    1214:	421a      	tst	r2, r3
    1216:	d034      	beq.n	1282 <__ssputs_r+0x86>
    1218:	2503      	movs	r5, #3
    121a:	6909      	ldr	r1, [r1, #16]
    121c:	6823      	ldr	r3, [r4, #0]
    121e:	1a5b      	subs	r3, r3, r1
    1220:	9302      	str	r3, [sp, #8]
    1222:	6963      	ldr	r3, [r4, #20]
    1224:	9802      	ldr	r0, [sp, #8]
    1226:	435d      	muls	r5, r3
    1228:	0feb      	lsrs	r3, r5, #31
    122a:	195d      	adds	r5, r3, r5
    122c:	9b01      	ldr	r3, [sp, #4]
    122e:	106d      	asrs	r5, r5, #1
    1230:	3301      	adds	r3, #1
    1232:	181b      	adds	r3, r3, r0
    1234:	42ab      	cmp	r3, r5
    1236:	d900      	bls.n	123a <__ssputs_r+0x3e>
    1238:	001d      	movs	r5, r3
    123a:	0553      	lsls	r3, r2, #21
    123c:	d532      	bpl.n	12a4 <__ssputs_r+0xa8>
    123e:	0029      	movs	r1, r5
    1240:	0038      	movs	r0, r7
    1242:	f7ff ff7d 	bl	1140 <_malloc_r>
    1246:	1e06      	subs	r6, r0, #0
    1248:	d109      	bne.n	125e <__ssputs_r+0x62>
    124a:	230c      	movs	r3, #12
    124c:	603b      	str	r3, [r7, #0]
    124e:	2340      	movs	r3, #64	; 0x40
    1250:	2001      	movs	r0, #1
    1252:	89a2      	ldrh	r2, [r4, #12]
    1254:	4240      	negs	r0, r0
    1256:	4313      	orrs	r3, r2
    1258:	81a3      	strh	r3, [r4, #12]
    125a:	b005      	add	sp, #20
    125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    125e:	9a02      	ldr	r2, [sp, #8]
    1260:	6921      	ldr	r1, [r4, #16]
    1262:	f000 fad6 	bl	1812 <memcpy>
    1266:	89a3      	ldrh	r3, [r4, #12]
    1268:	4a14      	ldr	r2, [pc, #80]	; (12bc <__ssputs_r+0xc0>)
    126a:	401a      	ands	r2, r3
    126c:	2380      	movs	r3, #128	; 0x80
    126e:	4313      	orrs	r3, r2
    1270:	81a3      	strh	r3, [r4, #12]
    1272:	9b02      	ldr	r3, [sp, #8]
    1274:	6126      	str	r6, [r4, #16]
    1276:	18f6      	adds	r6, r6, r3
    1278:	6026      	str	r6, [r4, #0]
    127a:	6165      	str	r5, [r4, #20]
    127c:	9e01      	ldr	r6, [sp, #4]
    127e:	1aed      	subs	r5, r5, r3
    1280:	60a5      	str	r5, [r4, #8]
    1282:	9b01      	ldr	r3, [sp, #4]
    1284:	42b3      	cmp	r3, r6
    1286:	d200      	bcs.n	128a <__ssputs_r+0x8e>
    1288:	001e      	movs	r6, r3
    128a:	0032      	movs	r2, r6
    128c:	9903      	ldr	r1, [sp, #12]
    128e:	6820      	ldr	r0, [r4, #0]
    1290:	f000 fac8 	bl	1824 <memmove>
    1294:	68a3      	ldr	r3, [r4, #8]
    1296:	2000      	movs	r0, #0
    1298:	1b9b      	subs	r3, r3, r6
    129a:	60a3      	str	r3, [r4, #8]
    129c:	6823      	ldr	r3, [r4, #0]
    129e:	199e      	adds	r6, r3, r6
    12a0:	6026      	str	r6, [r4, #0]
    12a2:	e7da      	b.n	125a <__ssputs_r+0x5e>
    12a4:	002a      	movs	r2, r5
    12a6:	0038      	movs	r0, r7
    12a8:	f000 fb1a 	bl	18e0 <_realloc_r>
    12ac:	1e06      	subs	r6, r0, #0
    12ae:	d1e0      	bne.n	1272 <__ssputs_r+0x76>
    12b0:	6921      	ldr	r1, [r4, #16]
    12b2:	0038      	movs	r0, r7
    12b4:	f000 faca 	bl	184c <_free_r>
    12b8:	e7c7      	b.n	124a <__ssputs_r+0x4e>
    12ba:	46c0      	nop			; (mov r8, r8)
    12bc:	fffffb7f 	.word	0xfffffb7f

000012c0 <_svfiprintf_r>:
    12c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12c2:	b09f      	sub	sp, #124	; 0x7c
    12c4:	9002      	str	r0, [sp, #8]
    12c6:	9305      	str	r3, [sp, #20]
    12c8:	898b      	ldrh	r3, [r1, #12]
    12ca:	000f      	movs	r7, r1
    12cc:	0016      	movs	r6, r2
    12ce:	061b      	lsls	r3, r3, #24
    12d0:	d511      	bpl.n	12f6 <_svfiprintf_r+0x36>
    12d2:	690b      	ldr	r3, [r1, #16]
    12d4:	2b00      	cmp	r3, #0
    12d6:	d10e      	bne.n	12f6 <_svfiprintf_r+0x36>
    12d8:	2140      	movs	r1, #64	; 0x40
    12da:	f7ff ff31 	bl	1140 <_malloc_r>
    12de:	6038      	str	r0, [r7, #0]
    12e0:	6138      	str	r0, [r7, #16]
    12e2:	2800      	cmp	r0, #0
    12e4:	d105      	bne.n	12f2 <_svfiprintf_r+0x32>
    12e6:	230c      	movs	r3, #12
    12e8:	9a02      	ldr	r2, [sp, #8]
    12ea:	3801      	subs	r0, #1
    12ec:	6013      	str	r3, [r2, #0]
    12ee:	b01f      	add	sp, #124	; 0x7c
    12f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12f2:	2340      	movs	r3, #64	; 0x40
    12f4:	617b      	str	r3, [r7, #20]
    12f6:	2300      	movs	r3, #0
    12f8:	ad06      	add	r5, sp, #24
    12fa:	616b      	str	r3, [r5, #20]
    12fc:	3320      	adds	r3, #32
    12fe:	766b      	strb	r3, [r5, #25]
    1300:	3310      	adds	r3, #16
    1302:	76ab      	strb	r3, [r5, #26]
    1304:	0034      	movs	r4, r6
    1306:	7823      	ldrb	r3, [r4, #0]
    1308:	2b00      	cmp	r3, #0
    130a:	d147      	bne.n	139c <_svfiprintf_r+0xdc>
    130c:	1ba3      	subs	r3, r4, r6
    130e:	9304      	str	r3, [sp, #16]
    1310:	d00d      	beq.n	132e <_svfiprintf_r+0x6e>
    1312:	1ba3      	subs	r3, r4, r6
    1314:	0032      	movs	r2, r6
    1316:	0039      	movs	r1, r7
    1318:	9802      	ldr	r0, [sp, #8]
    131a:	f7ff ff6f 	bl	11fc <__ssputs_r>
    131e:	1c43      	adds	r3, r0, #1
    1320:	d100      	bne.n	1324 <_svfiprintf_r+0x64>
    1322:	e0b5      	b.n	1490 <_svfiprintf_r+0x1d0>
    1324:	696a      	ldr	r2, [r5, #20]
    1326:	9b04      	ldr	r3, [sp, #16]
    1328:	4694      	mov	ip, r2
    132a:	4463      	add	r3, ip
    132c:	616b      	str	r3, [r5, #20]
    132e:	7823      	ldrb	r3, [r4, #0]
    1330:	2b00      	cmp	r3, #0
    1332:	d100      	bne.n	1336 <_svfiprintf_r+0x76>
    1334:	e0ac      	b.n	1490 <_svfiprintf_r+0x1d0>
    1336:	2201      	movs	r2, #1
    1338:	2300      	movs	r3, #0
    133a:	4252      	negs	r2, r2
    133c:	606a      	str	r2, [r5, #4]
    133e:	a902      	add	r1, sp, #8
    1340:	3254      	adds	r2, #84	; 0x54
    1342:	1852      	adds	r2, r2, r1
    1344:	3401      	adds	r4, #1
    1346:	602b      	str	r3, [r5, #0]
    1348:	60eb      	str	r3, [r5, #12]
    134a:	60ab      	str	r3, [r5, #8]
    134c:	7013      	strb	r3, [r2, #0]
    134e:	65ab      	str	r3, [r5, #88]	; 0x58
    1350:	4e58      	ldr	r6, [pc, #352]	; (14b4 <_svfiprintf_r+0x1f4>)
    1352:	2205      	movs	r2, #5
    1354:	7821      	ldrb	r1, [r4, #0]
    1356:	0030      	movs	r0, r6
    1358:	f000 fa50 	bl	17fc <memchr>
    135c:	1c62      	adds	r2, r4, #1
    135e:	2800      	cmp	r0, #0
    1360:	d120      	bne.n	13a4 <_svfiprintf_r+0xe4>
    1362:	6829      	ldr	r1, [r5, #0]
    1364:	06cb      	lsls	r3, r1, #27
    1366:	d504      	bpl.n	1372 <_svfiprintf_r+0xb2>
    1368:	2353      	movs	r3, #83	; 0x53
    136a:	ae02      	add	r6, sp, #8
    136c:	3020      	adds	r0, #32
    136e:	199b      	adds	r3, r3, r6
    1370:	7018      	strb	r0, [r3, #0]
    1372:	070b      	lsls	r3, r1, #28
    1374:	d504      	bpl.n	1380 <_svfiprintf_r+0xc0>
    1376:	2353      	movs	r3, #83	; 0x53
    1378:	202b      	movs	r0, #43	; 0x2b
    137a:	ae02      	add	r6, sp, #8
    137c:	199b      	adds	r3, r3, r6
    137e:	7018      	strb	r0, [r3, #0]
    1380:	7823      	ldrb	r3, [r4, #0]
    1382:	2b2a      	cmp	r3, #42	; 0x2a
    1384:	d016      	beq.n	13b4 <_svfiprintf_r+0xf4>
    1386:	2000      	movs	r0, #0
    1388:	210a      	movs	r1, #10
    138a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    138c:	7822      	ldrb	r2, [r4, #0]
    138e:	3a30      	subs	r2, #48	; 0x30
    1390:	2a09      	cmp	r2, #9
    1392:	d955      	bls.n	1440 <_svfiprintf_r+0x180>
    1394:	2800      	cmp	r0, #0
    1396:	d015      	beq.n	13c4 <_svfiprintf_r+0x104>
    1398:	9309      	str	r3, [sp, #36]	; 0x24
    139a:	e013      	b.n	13c4 <_svfiprintf_r+0x104>
    139c:	2b25      	cmp	r3, #37	; 0x25
    139e:	d0b5      	beq.n	130c <_svfiprintf_r+0x4c>
    13a0:	3401      	adds	r4, #1
    13a2:	e7b0      	b.n	1306 <_svfiprintf_r+0x46>
    13a4:	2301      	movs	r3, #1
    13a6:	1b80      	subs	r0, r0, r6
    13a8:	4083      	lsls	r3, r0
    13aa:	6829      	ldr	r1, [r5, #0]
    13ac:	0014      	movs	r4, r2
    13ae:	430b      	orrs	r3, r1
    13b0:	602b      	str	r3, [r5, #0]
    13b2:	e7cd      	b.n	1350 <_svfiprintf_r+0x90>
    13b4:	9b05      	ldr	r3, [sp, #20]
    13b6:	1d18      	adds	r0, r3, #4
    13b8:	681b      	ldr	r3, [r3, #0]
    13ba:	9005      	str	r0, [sp, #20]
    13bc:	2b00      	cmp	r3, #0
    13be:	db39      	blt.n	1434 <_svfiprintf_r+0x174>
    13c0:	9309      	str	r3, [sp, #36]	; 0x24
    13c2:	0014      	movs	r4, r2
    13c4:	7823      	ldrb	r3, [r4, #0]
    13c6:	2b2e      	cmp	r3, #46	; 0x2e
    13c8:	d10b      	bne.n	13e2 <_svfiprintf_r+0x122>
    13ca:	7863      	ldrb	r3, [r4, #1]
    13cc:	1c62      	adds	r2, r4, #1
    13ce:	2b2a      	cmp	r3, #42	; 0x2a
    13d0:	d13e      	bne.n	1450 <_svfiprintf_r+0x190>
    13d2:	9b05      	ldr	r3, [sp, #20]
    13d4:	3402      	adds	r4, #2
    13d6:	1d1a      	adds	r2, r3, #4
    13d8:	681b      	ldr	r3, [r3, #0]
    13da:	9205      	str	r2, [sp, #20]
    13dc:	2b00      	cmp	r3, #0
    13de:	db34      	blt.n	144a <_svfiprintf_r+0x18a>
    13e0:	9307      	str	r3, [sp, #28]
    13e2:	4e35      	ldr	r6, [pc, #212]	; (14b8 <_svfiprintf_r+0x1f8>)
    13e4:	7821      	ldrb	r1, [r4, #0]
    13e6:	2203      	movs	r2, #3
    13e8:	0030      	movs	r0, r6
    13ea:	f000 fa07 	bl	17fc <memchr>
    13ee:	2800      	cmp	r0, #0
    13f0:	d006      	beq.n	1400 <_svfiprintf_r+0x140>
    13f2:	2340      	movs	r3, #64	; 0x40
    13f4:	1b80      	subs	r0, r0, r6
    13f6:	4083      	lsls	r3, r0
    13f8:	682a      	ldr	r2, [r5, #0]
    13fa:	3401      	adds	r4, #1
    13fc:	4313      	orrs	r3, r2
    13fe:	602b      	str	r3, [r5, #0]
    1400:	7821      	ldrb	r1, [r4, #0]
    1402:	2206      	movs	r2, #6
    1404:	482d      	ldr	r0, [pc, #180]	; (14bc <_svfiprintf_r+0x1fc>)
    1406:	1c66      	adds	r6, r4, #1
    1408:	7629      	strb	r1, [r5, #24]
    140a:	f000 f9f7 	bl	17fc <memchr>
    140e:	2800      	cmp	r0, #0
    1410:	d046      	beq.n	14a0 <_svfiprintf_r+0x1e0>
    1412:	4b2b      	ldr	r3, [pc, #172]	; (14c0 <_svfiprintf_r+0x200>)
    1414:	2b00      	cmp	r3, #0
    1416:	d12f      	bne.n	1478 <_svfiprintf_r+0x1b8>
    1418:	6829      	ldr	r1, [r5, #0]
    141a:	9b05      	ldr	r3, [sp, #20]
    141c:	2207      	movs	r2, #7
    141e:	05c9      	lsls	r1, r1, #23
    1420:	d528      	bpl.n	1474 <_svfiprintf_r+0x1b4>
    1422:	189b      	adds	r3, r3, r2
    1424:	4393      	bics	r3, r2
    1426:	3308      	adds	r3, #8
    1428:	9305      	str	r3, [sp, #20]
    142a:	696b      	ldr	r3, [r5, #20]
    142c:	9a03      	ldr	r2, [sp, #12]
    142e:	189b      	adds	r3, r3, r2
    1430:	616b      	str	r3, [r5, #20]
    1432:	e767      	b.n	1304 <_svfiprintf_r+0x44>
    1434:	425b      	negs	r3, r3
    1436:	60eb      	str	r3, [r5, #12]
    1438:	2302      	movs	r3, #2
    143a:	430b      	orrs	r3, r1
    143c:	602b      	str	r3, [r5, #0]
    143e:	e7c0      	b.n	13c2 <_svfiprintf_r+0x102>
    1440:	434b      	muls	r3, r1
    1442:	3401      	adds	r4, #1
    1444:	189b      	adds	r3, r3, r2
    1446:	2001      	movs	r0, #1
    1448:	e7a0      	b.n	138c <_svfiprintf_r+0xcc>
    144a:	2301      	movs	r3, #1
    144c:	425b      	negs	r3, r3
    144e:	e7c7      	b.n	13e0 <_svfiprintf_r+0x120>
    1450:	2300      	movs	r3, #0
    1452:	0014      	movs	r4, r2
    1454:	200a      	movs	r0, #10
    1456:	001a      	movs	r2, r3
    1458:	606b      	str	r3, [r5, #4]
    145a:	7821      	ldrb	r1, [r4, #0]
    145c:	3930      	subs	r1, #48	; 0x30
    145e:	2909      	cmp	r1, #9
    1460:	d903      	bls.n	146a <_svfiprintf_r+0x1aa>
    1462:	2b00      	cmp	r3, #0
    1464:	d0bd      	beq.n	13e2 <_svfiprintf_r+0x122>
    1466:	9207      	str	r2, [sp, #28]
    1468:	e7bb      	b.n	13e2 <_svfiprintf_r+0x122>
    146a:	4342      	muls	r2, r0
    146c:	3401      	adds	r4, #1
    146e:	1852      	adds	r2, r2, r1
    1470:	2301      	movs	r3, #1
    1472:	e7f2      	b.n	145a <_svfiprintf_r+0x19a>
    1474:	3307      	adds	r3, #7
    1476:	e7d5      	b.n	1424 <_svfiprintf_r+0x164>
    1478:	ab05      	add	r3, sp, #20
    147a:	9300      	str	r3, [sp, #0]
    147c:	003a      	movs	r2, r7
    147e:	4b11      	ldr	r3, [pc, #68]	; (14c4 <_svfiprintf_r+0x204>)
    1480:	0029      	movs	r1, r5
    1482:	9802      	ldr	r0, [sp, #8]
    1484:	e000      	b.n	1488 <_svfiprintf_r+0x1c8>
    1486:	bf00      	nop
    1488:	9003      	str	r0, [sp, #12]
    148a:	9b03      	ldr	r3, [sp, #12]
    148c:	3301      	adds	r3, #1
    148e:	d1cc      	bne.n	142a <_svfiprintf_r+0x16a>
    1490:	89bb      	ldrh	r3, [r7, #12]
    1492:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1494:	065b      	lsls	r3, r3, #25
    1496:	d400      	bmi.n	149a <_svfiprintf_r+0x1da>
    1498:	e729      	b.n	12ee <_svfiprintf_r+0x2e>
    149a:	2001      	movs	r0, #1
    149c:	4240      	negs	r0, r0
    149e:	e726      	b.n	12ee <_svfiprintf_r+0x2e>
    14a0:	ab05      	add	r3, sp, #20
    14a2:	9300      	str	r3, [sp, #0]
    14a4:	003a      	movs	r2, r7
    14a6:	4b07      	ldr	r3, [pc, #28]	; (14c4 <_svfiprintf_r+0x204>)
    14a8:	0029      	movs	r1, r5
    14aa:	9802      	ldr	r0, [sp, #8]
    14ac:	f000 f87a 	bl	15a4 <_printf_i>
    14b0:	e7ea      	b.n	1488 <_svfiprintf_r+0x1c8>
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	00001a80 	.word	0x00001a80
    14b8:	00001a86 	.word	0x00001a86
    14bc:	00001a8a 	.word	0x00001a8a
    14c0:	00000000 	.word	0x00000000
    14c4:	000011fd 	.word	0x000011fd

000014c8 <_printf_common>:
    14c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    14ca:	0015      	movs	r5, r2
    14cc:	9301      	str	r3, [sp, #4]
    14ce:	688a      	ldr	r2, [r1, #8]
    14d0:	690b      	ldr	r3, [r1, #16]
    14d2:	9000      	str	r0, [sp, #0]
    14d4:	000c      	movs	r4, r1
    14d6:	4293      	cmp	r3, r2
    14d8:	da00      	bge.n	14dc <_printf_common+0x14>
    14da:	0013      	movs	r3, r2
    14dc:	0022      	movs	r2, r4
    14de:	602b      	str	r3, [r5, #0]
    14e0:	3243      	adds	r2, #67	; 0x43
    14e2:	7812      	ldrb	r2, [r2, #0]
    14e4:	2a00      	cmp	r2, #0
    14e6:	d001      	beq.n	14ec <_printf_common+0x24>
    14e8:	3301      	adds	r3, #1
    14ea:	602b      	str	r3, [r5, #0]
    14ec:	6823      	ldr	r3, [r4, #0]
    14ee:	069b      	lsls	r3, r3, #26
    14f0:	d502      	bpl.n	14f8 <_printf_common+0x30>
    14f2:	682b      	ldr	r3, [r5, #0]
    14f4:	3302      	adds	r3, #2
    14f6:	602b      	str	r3, [r5, #0]
    14f8:	2706      	movs	r7, #6
    14fa:	6823      	ldr	r3, [r4, #0]
    14fc:	401f      	ands	r7, r3
    14fe:	d027      	beq.n	1550 <_printf_common+0x88>
    1500:	0023      	movs	r3, r4
    1502:	3343      	adds	r3, #67	; 0x43
    1504:	781b      	ldrb	r3, [r3, #0]
    1506:	1e5a      	subs	r2, r3, #1
    1508:	4193      	sbcs	r3, r2
    150a:	6822      	ldr	r2, [r4, #0]
    150c:	0692      	lsls	r2, r2, #26
    150e:	d430      	bmi.n	1572 <_printf_common+0xaa>
    1510:	0022      	movs	r2, r4
    1512:	9901      	ldr	r1, [sp, #4]
    1514:	3243      	adds	r2, #67	; 0x43
    1516:	9800      	ldr	r0, [sp, #0]
    1518:	9e08      	ldr	r6, [sp, #32]
    151a:	47b0      	blx	r6
    151c:	1c43      	adds	r3, r0, #1
    151e:	d025      	beq.n	156c <_printf_common+0xa4>
    1520:	2306      	movs	r3, #6
    1522:	6820      	ldr	r0, [r4, #0]
    1524:	682a      	ldr	r2, [r5, #0]
    1526:	68e1      	ldr	r1, [r4, #12]
    1528:	4003      	ands	r3, r0
    152a:	2500      	movs	r5, #0
    152c:	2b04      	cmp	r3, #4
    152e:	d103      	bne.n	1538 <_printf_common+0x70>
    1530:	1a8d      	subs	r5, r1, r2
    1532:	43eb      	mvns	r3, r5
    1534:	17db      	asrs	r3, r3, #31
    1536:	401d      	ands	r5, r3
    1538:	68a3      	ldr	r3, [r4, #8]
    153a:	6922      	ldr	r2, [r4, #16]
    153c:	4293      	cmp	r3, r2
    153e:	dd01      	ble.n	1544 <_printf_common+0x7c>
    1540:	1a9b      	subs	r3, r3, r2
    1542:	18ed      	adds	r5, r5, r3
    1544:	2700      	movs	r7, #0
    1546:	42bd      	cmp	r5, r7
    1548:	d120      	bne.n	158c <_printf_common+0xc4>
    154a:	2000      	movs	r0, #0
    154c:	e010      	b.n	1570 <_printf_common+0xa8>
    154e:	3701      	adds	r7, #1
    1550:	68e3      	ldr	r3, [r4, #12]
    1552:	682a      	ldr	r2, [r5, #0]
    1554:	1a9b      	subs	r3, r3, r2
    1556:	429f      	cmp	r7, r3
    1558:	dad2      	bge.n	1500 <_printf_common+0x38>
    155a:	0022      	movs	r2, r4
    155c:	2301      	movs	r3, #1
    155e:	3219      	adds	r2, #25
    1560:	9901      	ldr	r1, [sp, #4]
    1562:	9800      	ldr	r0, [sp, #0]
    1564:	9e08      	ldr	r6, [sp, #32]
    1566:	47b0      	blx	r6
    1568:	1c43      	adds	r3, r0, #1
    156a:	d1f0      	bne.n	154e <_printf_common+0x86>
    156c:	2001      	movs	r0, #1
    156e:	4240      	negs	r0, r0
    1570:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1572:	2030      	movs	r0, #48	; 0x30
    1574:	18e1      	adds	r1, r4, r3
    1576:	3143      	adds	r1, #67	; 0x43
    1578:	7008      	strb	r0, [r1, #0]
    157a:	0021      	movs	r1, r4
    157c:	1c5a      	adds	r2, r3, #1
    157e:	3145      	adds	r1, #69	; 0x45
    1580:	7809      	ldrb	r1, [r1, #0]
    1582:	18a2      	adds	r2, r4, r2
    1584:	3243      	adds	r2, #67	; 0x43
    1586:	3302      	adds	r3, #2
    1588:	7011      	strb	r1, [r2, #0]
    158a:	e7c1      	b.n	1510 <_printf_common+0x48>
    158c:	0022      	movs	r2, r4
    158e:	2301      	movs	r3, #1
    1590:	321a      	adds	r2, #26
    1592:	9901      	ldr	r1, [sp, #4]
    1594:	9800      	ldr	r0, [sp, #0]
    1596:	9e08      	ldr	r6, [sp, #32]
    1598:	47b0      	blx	r6
    159a:	1c43      	adds	r3, r0, #1
    159c:	d0e6      	beq.n	156c <_printf_common+0xa4>
    159e:	3701      	adds	r7, #1
    15a0:	e7d1      	b.n	1546 <_printf_common+0x7e>
	...

000015a4 <_printf_i>:
    15a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15a6:	b08b      	sub	sp, #44	; 0x2c
    15a8:	9206      	str	r2, [sp, #24]
    15aa:	000a      	movs	r2, r1
    15ac:	3243      	adds	r2, #67	; 0x43
    15ae:	9307      	str	r3, [sp, #28]
    15b0:	9005      	str	r0, [sp, #20]
    15b2:	9204      	str	r2, [sp, #16]
    15b4:	7e0a      	ldrb	r2, [r1, #24]
    15b6:	000c      	movs	r4, r1
    15b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    15ba:	2a6e      	cmp	r2, #110	; 0x6e
    15bc:	d100      	bne.n	15c0 <_printf_i+0x1c>
    15be:	e08f      	b.n	16e0 <_printf_i+0x13c>
    15c0:	d817      	bhi.n	15f2 <_printf_i+0x4e>
    15c2:	2a63      	cmp	r2, #99	; 0x63
    15c4:	d02c      	beq.n	1620 <_printf_i+0x7c>
    15c6:	d808      	bhi.n	15da <_printf_i+0x36>
    15c8:	2a00      	cmp	r2, #0
    15ca:	d100      	bne.n	15ce <_printf_i+0x2a>
    15cc:	e099      	b.n	1702 <_printf_i+0x15e>
    15ce:	2a58      	cmp	r2, #88	; 0x58
    15d0:	d054      	beq.n	167c <_printf_i+0xd8>
    15d2:	0026      	movs	r6, r4
    15d4:	3642      	adds	r6, #66	; 0x42
    15d6:	7032      	strb	r2, [r6, #0]
    15d8:	e029      	b.n	162e <_printf_i+0x8a>
    15da:	2a64      	cmp	r2, #100	; 0x64
    15dc:	d001      	beq.n	15e2 <_printf_i+0x3e>
    15de:	2a69      	cmp	r2, #105	; 0x69
    15e0:	d1f7      	bne.n	15d2 <_printf_i+0x2e>
    15e2:	6821      	ldr	r1, [r4, #0]
    15e4:	681a      	ldr	r2, [r3, #0]
    15e6:	0608      	lsls	r0, r1, #24
    15e8:	d523      	bpl.n	1632 <_printf_i+0x8e>
    15ea:	1d11      	adds	r1, r2, #4
    15ec:	6019      	str	r1, [r3, #0]
    15ee:	6815      	ldr	r5, [r2, #0]
    15f0:	e025      	b.n	163e <_printf_i+0x9a>
    15f2:	2a73      	cmp	r2, #115	; 0x73
    15f4:	d100      	bne.n	15f8 <_printf_i+0x54>
    15f6:	e088      	b.n	170a <_printf_i+0x166>
    15f8:	d808      	bhi.n	160c <_printf_i+0x68>
    15fa:	2a6f      	cmp	r2, #111	; 0x6f
    15fc:	d029      	beq.n	1652 <_printf_i+0xae>
    15fe:	2a70      	cmp	r2, #112	; 0x70
    1600:	d1e7      	bne.n	15d2 <_printf_i+0x2e>
    1602:	2220      	movs	r2, #32
    1604:	6809      	ldr	r1, [r1, #0]
    1606:	430a      	orrs	r2, r1
    1608:	6022      	str	r2, [r4, #0]
    160a:	e003      	b.n	1614 <_printf_i+0x70>
    160c:	2a75      	cmp	r2, #117	; 0x75
    160e:	d020      	beq.n	1652 <_printf_i+0xae>
    1610:	2a78      	cmp	r2, #120	; 0x78
    1612:	d1de      	bne.n	15d2 <_printf_i+0x2e>
    1614:	0022      	movs	r2, r4
    1616:	2178      	movs	r1, #120	; 0x78
    1618:	3245      	adds	r2, #69	; 0x45
    161a:	7011      	strb	r1, [r2, #0]
    161c:	4a6c      	ldr	r2, [pc, #432]	; (17d0 <_printf_i+0x22c>)
    161e:	e030      	b.n	1682 <_printf_i+0xde>
    1620:	000e      	movs	r6, r1
    1622:	681a      	ldr	r2, [r3, #0]
    1624:	3642      	adds	r6, #66	; 0x42
    1626:	1d11      	adds	r1, r2, #4
    1628:	6019      	str	r1, [r3, #0]
    162a:	6813      	ldr	r3, [r2, #0]
    162c:	7033      	strb	r3, [r6, #0]
    162e:	2301      	movs	r3, #1
    1630:	e079      	b.n	1726 <_printf_i+0x182>
    1632:	0649      	lsls	r1, r1, #25
    1634:	d5d9      	bpl.n	15ea <_printf_i+0x46>
    1636:	1d11      	adds	r1, r2, #4
    1638:	6019      	str	r1, [r3, #0]
    163a:	2300      	movs	r3, #0
    163c:	5ed5      	ldrsh	r5, [r2, r3]
    163e:	2d00      	cmp	r5, #0
    1640:	da03      	bge.n	164a <_printf_i+0xa6>
    1642:	232d      	movs	r3, #45	; 0x2d
    1644:	9a04      	ldr	r2, [sp, #16]
    1646:	426d      	negs	r5, r5
    1648:	7013      	strb	r3, [r2, #0]
    164a:	4b62      	ldr	r3, [pc, #392]	; (17d4 <_printf_i+0x230>)
    164c:	270a      	movs	r7, #10
    164e:	9303      	str	r3, [sp, #12]
    1650:	e02f      	b.n	16b2 <_printf_i+0x10e>
    1652:	6820      	ldr	r0, [r4, #0]
    1654:	6819      	ldr	r1, [r3, #0]
    1656:	0605      	lsls	r5, r0, #24
    1658:	d503      	bpl.n	1662 <_printf_i+0xbe>
    165a:	1d08      	adds	r0, r1, #4
    165c:	6018      	str	r0, [r3, #0]
    165e:	680d      	ldr	r5, [r1, #0]
    1660:	e005      	b.n	166e <_printf_i+0xca>
    1662:	0640      	lsls	r0, r0, #25
    1664:	d5f9      	bpl.n	165a <_printf_i+0xb6>
    1666:	680d      	ldr	r5, [r1, #0]
    1668:	1d08      	adds	r0, r1, #4
    166a:	6018      	str	r0, [r3, #0]
    166c:	b2ad      	uxth	r5, r5
    166e:	4b59      	ldr	r3, [pc, #356]	; (17d4 <_printf_i+0x230>)
    1670:	2708      	movs	r7, #8
    1672:	9303      	str	r3, [sp, #12]
    1674:	2a6f      	cmp	r2, #111	; 0x6f
    1676:	d018      	beq.n	16aa <_printf_i+0x106>
    1678:	270a      	movs	r7, #10
    167a:	e016      	b.n	16aa <_printf_i+0x106>
    167c:	3145      	adds	r1, #69	; 0x45
    167e:	700a      	strb	r2, [r1, #0]
    1680:	4a54      	ldr	r2, [pc, #336]	; (17d4 <_printf_i+0x230>)
    1682:	9203      	str	r2, [sp, #12]
    1684:	681a      	ldr	r2, [r3, #0]
    1686:	6821      	ldr	r1, [r4, #0]
    1688:	1d10      	adds	r0, r2, #4
    168a:	6018      	str	r0, [r3, #0]
    168c:	6815      	ldr	r5, [r2, #0]
    168e:	0608      	lsls	r0, r1, #24
    1690:	d522      	bpl.n	16d8 <_printf_i+0x134>
    1692:	07cb      	lsls	r3, r1, #31
    1694:	d502      	bpl.n	169c <_printf_i+0xf8>
    1696:	2320      	movs	r3, #32
    1698:	4319      	orrs	r1, r3
    169a:	6021      	str	r1, [r4, #0]
    169c:	2710      	movs	r7, #16
    169e:	2d00      	cmp	r5, #0
    16a0:	d103      	bne.n	16aa <_printf_i+0x106>
    16a2:	2320      	movs	r3, #32
    16a4:	6822      	ldr	r2, [r4, #0]
    16a6:	439a      	bics	r2, r3
    16a8:	6022      	str	r2, [r4, #0]
    16aa:	0023      	movs	r3, r4
    16ac:	2200      	movs	r2, #0
    16ae:	3343      	adds	r3, #67	; 0x43
    16b0:	701a      	strb	r2, [r3, #0]
    16b2:	6863      	ldr	r3, [r4, #4]
    16b4:	60a3      	str	r3, [r4, #8]
    16b6:	2b00      	cmp	r3, #0
    16b8:	db5c      	blt.n	1774 <_printf_i+0x1d0>
    16ba:	2204      	movs	r2, #4
    16bc:	6821      	ldr	r1, [r4, #0]
    16be:	4391      	bics	r1, r2
    16c0:	6021      	str	r1, [r4, #0]
    16c2:	2d00      	cmp	r5, #0
    16c4:	d158      	bne.n	1778 <_printf_i+0x1d4>
    16c6:	9e04      	ldr	r6, [sp, #16]
    16c8:	2b00      	cmp	r3, #0
    16ca:	d064      	beq.n	1796 <_printf_i+0x1f2>
    16cc:	0026      	movs	r6, r4
    16ce:	9b03      	ldr	r3, [sp, #12]
    16d0:	3642      	adds	r6, #66	; 0x42
    16d2:	781b      	ldrb	r3, [r3, #0]
    16d4:	7033      	strb	r3, [r6, #0]
    16d6:	e05e      	b.n	1796 <_printf_i+0x1f2>
    16d8:	0648      	lsls	r0, r1, #25
    16da:	d5da      	bpl.n	1692 <_printf_i+0xee>
    16dc:	b2ad      	uxth	r5, r5
    16de:	e7d8      	b.n	1692 <_printf_i+0xee>
    16e0:	6809      	ldr	r1, [r1, #0]
    16e2:	681a      	ldr	r2, [r3, #0]
    16e4:	0608      	lsls	r0, r1, #24
    16e6:	d505      	bpl.n	16f4 <_printf_i+0x150>
    16e8:	1d11      	adds	r1, r2, #4
    16ea:	6019      	str	r1, [r3, #0]
    16ec:	6813      	ldr	r3, [r2, #0]
    16ee:	6962      	ldr	r2, [r4, #20]
    16f0:	601a      	str	r2, [r3, #0]
    16f2:	e006      	b.n	1702 <_printf_i+0x15e>
    16f4:	0649      	lsls	r1, r1, #25
    16f6:	d5f7      	bpl.n	16e8 <_printf_i+0x144>
    16f8:	1d11      	adds	r1, r2, #4
    16fa:	6019      	str	r1, [r3, #0]
    16fc:	6813      	ldr	r3, [r2, #0]
    16fe:	8aa2      	ldrh	r2, [r4, #20]
    1700:	801a      	strh	r2, [r3, #0]
    1702:	2300      	movs	r3, #0
    1704:	9e04      	ldr	r6, [sp, #16]
    1706:	6123      	str	r3, [r4, #16]
    1708:	e054      	b.n	17b4 <_printf_i+0x210>
    170a:	681a      	ldr	r2, [r3, #0]
    170c:	1d11      	adds	r1, r2, #4
    170e:	6019      	str	r1, [r3, #0]
    1710:	6816      	ldr	r6, [r2, #0]
    1712:	2100      	movs	r1, #0
    1714:	6862      	ldr	r2, [r4, #4]
    1716:	0030      	movs	r0, r6
    1718:	f000 f870 	bl	17fc <memchr>
    171c:	2800      	cmp	r0, #0
    171e:	d001      	beq.n	1724 <_printf_i+0x180>
    1720:	1b80      	subs	r0, r0, r6
    1722:	6060      	str	r0, [r4, #4]
    1724:	6863      	ldr	r3, [r4, #4]
    1726:	6123      	str	r3, [r4, #16]
    1728:	2300      	movs	r3, #0
    172a:	9a04      	ldr	r2, [sp, #16]
    172c:	7013      	strb	r3, [r2, #0]
    172e:	e041      	b.n	17b4 <_printf_i+0x210>
    1730:	6923      	ldr	r3, [r4, #16]
    1732:	0032      	movs	r2, r6
    1734:	9906      	ldr	r1, [sp, #24]
    1736:	9805      	ldr	r0, [sp, #20]
    1738:	9d07      	ldr	r5, [sp, #28]
    173a:	47a8      	blx	r5
    173c:	1c43      	adds	r3, r0, #1
    173e:	d043      	beq.n	17c8 <_printf_i+0x224>
    1740:	6823      	ldr	r3, [r4, #0]
    1742:	2500      	movs	r5, #0
    1744:	079b      	lsls	r3, r3, #30
    1746:	d40f      	bmi.n	1768 <_printf_i+0x1c4>
    1748:	9b09      	ldr	r3, [sp, #36]	; 0x24
    174a:	68e0      	ldr	r0, [r4, #12]
    174c:	4298      	cmp	r0, r3
    174e:	da3d      	bge.n	17cc <_printf_i+0x228>
    1750:	0018      	movs	r0, r3
    1752:	e03b      	b.n	17cc <_printf_i+0x228>
    1754:	0022      	movs	r2, r4
    1756:	2301      	movs	r3, #1
    1758:	3219      	adds	r2, #25
    175a:	9906      	ldr	r1, [sp, #24]
    175c:	9805      	ldr	r0, [sp, #20]
    175e:	9e07      	ldr	r6, [sp, #28]
    1760:	47b0      	blx	r6
    1762:	1c43      	adds	r3, r0, #1
    1764:	d030      	beq.n	17c8 <_printf_i+0x224>
    1766:	3501      	adds	r5, #1
    1768:	68e3      	ldr	r3, [r4, #12]
    176a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    176c:	1a9b      	subs	r3, r3, r2
    176e:	429d      	cmp	r5, r3
    1770:	dbf0      	blt.n	1754 <_printf_i+0x1b0>
    1772:	e7e9      	b.n	1748 <_printf_i+0x1a4>
    1774:	2d00      	cmp	r5, #0
    1776:	d0a9      	beq.n	16cc <_printf_i+0x128>
    1778:	9e04      	ldr	r6, [sp, #16]
    177a:	0028      	movs	r0, r5
    177c:	0039      	movs	r1, r7
    177e:	f7ff fc83 	bl	1088 <__aeabi_uidivmod>
    1782:	9b03      	ldr	r3, [sp, #12]
    1784:	3e01      	subs	r6, #1
    1786:	5c5b      	ldrb	r3, [r3, r1]
    1788:	0028      	movs	r0, r5
    178a:	7033      	strb	r3, [r6, #0]
    178c:	0039      	movs	r1, r7
    178e:	f7ff fbf5 	bl	f7c <__udivsi3>
    1792:	1e05      	subs	r5, r0, #0
    1794:	d1f1      	bne.n	177a <_printf_i+0x1d6>
    1796:	2f08      	cmp	r7, #8
    1798:	d109      	bne.n	17ae <_printf_i+0x20a>
    179a:	6823      	ldr	r3, [r4, #0]
    179c:	07db      	lsls	r3, r3, #31
    179e:	d506      	bpl.n	17ae <_printf_i+0x20a>
    17a0:	6863      	ldr	r3, [r4, #4]
    17a2:	6922      	ldr	r2, [r4, #16]
    17a4:	4293      	cmp	r3, r2
    17a6:	dc02      	bgt.n	17ae <_printf_i+0x20a>
    17a8:	2330      	movs	r3, #48	; 0x30
    17aa:	3e01      	subs	r6, #1
    17ac:	7033      	strb	r3, [r6, #0]
    17ae:	9b04      	ldr	r3, [sp, #16]
    17b0:	1b9b      	subs	r3, r3, r6
    17b2:	6123      	str	r3, [r4, #16]
    17b4:	9b07      	ldr	r3, [sp, #28]
    17b6:	aa09      	add	r2, sp, #36	; 0x24
    17b8:	9300      	str	r3, [sp, #0]
    17ba:	0021      	movs	r1, r4
    17bc:	9b06      	ldr	r3, [sp, #24]
    17be:	9805      	ldr	r0, [sp, #20]
    17c0:	f7ff fe82 	bl	14c8 <_printf_common>
    17c4:	1c43      	adds	r3, r0, #1
    17c6:	d1b3      	bne.n	1730 <_printf_i+0x18c>
    17c8:	2001      	movs	r0, #1
    17ca:	4240      	negs	r0, r0
    17cc:	b00b      	add	sp, #44	; 0x2c
    17ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17d0:	00001aa2 	.word	0x00001aa2
    17d4:	00001a91 	.word	0x00001a91

000017d8 <_sbrk_r>:
    17d8:	2300      	movs	r3, #0
    17da:	b570      	push	{r4, r5, r6, lr}
    17dc:	4c06      	ldr	r4, [pc, #24]	; (17f8 <_sbrk_r+0x20>)
    17de:	0005      	movs	r5, r0
    17e0:	0008      	movs	r0, r1
    17e2:	6023      	str	r3, [r4, #0]
    17e4:	f7fe ffca 	bl	77c <_sbrk>
    17e8:	1c43      	adds	r3, r0, #1
    17ea:	d103      	bne.n	17f4 <_sbrk_r+0x1c>
    17ec:	6823      	ldr	r3, [r4, #0]
    17ee:	2b00      	cmp	r3, #0
    17f0:	d000      	beq.n	17f4 <_sbrk_r+0x1c>
    17f2:	602b      	str	r3, [r5, #0]
    17f4:	bd70      	pop	{r4, r5, r6, pc}
    17f6:	46c0      	nop			; (mov r8, r8)
    17f8:	200000b4 	.word	0x200000b4

000017fc <memchr>:
    17fc:	b2c9      	uxtb	r1, r1
    17fe:	1882      	adds	r2, r0, r2
    1800:	4290      	cmp	r0, r2
    1802:	d101      	bne.n	1808 <memchr+0xc>
    1804:	2000      	movs	r0, #0
    1806:	4770      	bx	lr
    1808:	7803      	ldrb	r3, [r0, #0]
    180a:	428b      	cmp	r3, r1
    180c:	d0fb      	beq.n	1806 <memchr+0xa>
    180e:	3001      	adds	r0, #1
    1810:	e7f6      	b.n	1800 <memchr+0x4>

00001812 <memcpy>:
    1812:	2300      	movs	r3, #0
    1814:	b510      	push	{r4, lr}
    1816:	429a      	cmp	r2, r3
    1818:	d100      	bne.n	181c <memcpy+0xa>
    181a:	bd10      	pop	{r4, pc}
    181c:	5ccc      	ldrb	r4, [r1, r3]
    181e:	54c4      	strb	r4, [r0, r3]
    1820:	3301      	adds	r3, #1
    1822:	e7f8      	b.n	1816 <memcpy+0x4>

00001824 <memmove>:
    1824:	b510      	push	{r4, lr}
    1826:	4288      	cmp	r0, r1
    1828:	d902      	bls.n	1830 <memmove+0xc>
    182a:	188b      	adds	r3, r1, r2
    182c:	4298      	cmp	r0, r3
    182e:	d308      	bcc.n	1842 <memmove+0x1e>
    1830:	2300      	movs	r3, #0
    1832:	429a      	cmp	r2, r3
    1834:	d007      	beq.n	1846 <memmove+0x22>
    1836:	5ccc      	ldrb	r4, [r1, r3]
    1838:	54c4      	strb	r4, [r0, r3]
    183a:	3301      	adds	r3, #1
    183c:	e7f9      	b.n	1832 <memmove+0xe>
    183e:	5c8b      	ldrb	r3, [r1, r2]
    1840:	5483      	strb	r3, [r0, r2]
    1842:	3a01      	subs	r2, #1
    1844:	d2fb      	bcs.n	183e <memmove+0x1a>
    1846:	bd10      	pop	{r4, pc}

00001848 <__malloc_lock>:
    1848:	4770      	bx	lr

0000184a <__malloc_unlock>:
    184a:	4770      	bx	lr

0000184c <_free_r>:
    184c:	b570      	push	{r4, r5, r6, lr}
    184e:	0005      	movs	r5, r0
    1850:	2900      	cmp	r1, #0
    1852:	d010      	beq.n	1876 <_free_r+0x2a>
    1854:	1f0c      	subs	r4, r1, #4
    1856:	6823      	ldr	r3, [r4, #0]
    1858:	2b00      	cmp	r3, #0
    185a:	da00      	bge.n	185e <_free_r+0x12>
    185c:	18e4      	adds	r4, r4, r3
    185e:	0028      	movs	r0, r5
    1860:	f7ff fff2 	bl	1848 <__malloc_lock>
    1864:	4a1d      	ldr	r2, [pc, #116]	; (18dc <_free_r+0x90>)
    1866:	6813      	ldr	r3, [r2, #0]
    1868:	2b00      	cmp	r3, #0
    186a:	d105      	bne.n	1878 <_free_r+0x2c>
    186c:	6063      	str	r3, [r4, #4]
    186e:	6014      	str	r4, [r2, #0]
    1870:	0028      	movs	r0, r5
    1872:	f7ff ffea 	bl	184a <__malloc_unlock>
    1876:	bd70      	pop	{r4, r5, r6, pc}
    1878:	42a3      	cmp	r3, r4
    187a:	d909      	bls.n	1890 <_free_r+0x44>
    187c:	6821      	ldr	r1, [r4, #0]
    187e:	1860      	adds	r0, r4, r1
    1880:	4283      	cmp	r3, r0
    1882:	d1f3      	bne.n	186c <_free_r+0x20>
    1884:	6818      	ldr	r0, [r3, #0]
    1886:	685b      	ldr	r3, [r3, #4]
    1888:	1841      	adds	r1, r0, r1
    188a:	6021      	str	r1, [r4, #0]
    188c:	e7ee      	b.n	186c <_free_r+0x20>
    188e:	0013      	movs	r3, r2
    1890:	685a      	ldr	r2, [r3, #4]
    1892:	2a00      	cmp	r2, #0
    1894:	d001      	beq.n	189a <_free_r+0x4e>
    1896:	42a2      	cmp	r2, r4
    1898:	d9f9      	bls.n	188e <_free_r+0x42>
    189a:	6819      	ldr	r1, [r3, #0]
    189c:	1858      	adds	r0, r3, r1
    189e:	42a0      	cmp	r0, r4
    18a0:	d10b      	bne.n	18ba <_free_r+0x6e>
    18a2:	6820      	ldr	r0, [r4, #0]
    18a4:	1809      	adds	r1, r1, r0
    18a6:	1858      	adds	r0, r3, r1
    18a8:	6019      	str	r1, [r3, #0]
    18aa:	4282      	cmp	r2, r0
    18ac:	d1e0      	bne.n	1870 <_free_r+0x24>
    18ae:	6810      	ldr	r0, [r2, #0]
    18b0:	6852      	ldr	r2, [r2, #4]
    18b2:	1841      	adds	r1, r0, r1
    18b4:	6019      	str	r1, [r3, #0]
    18b6:	605a      	str	r2, [r3, #4]
    18b8:	e7da      	b.n	1870 <_free_r+0x24>
    18ba:	42a0      	cmp	r0, r4
    18bc:	d902      	bls.n	18c4 <_free_r+0x78>
    18be:	230c      	movs	r3, #12
    18c0:	602b      	str	r3, [r5, #0]
    18c2:	e7d5      	b.n	1870 <_free_r+0x24>
    18c4:	6821      	ldr	r1, [r4, #0]
    18c6:	1860      	adds	r0, r4, r1
    18c8:	4282      	cmp	r2, r0
    18ca:	d103      	bne.n	18d4 <_free_r+0x88>
    18cc:	6810      	ldr	r0, [r2, #0]
    18ce:	6852      	ldr	r2, [r2, #4]
    18d0:	1841      	adds	r1, r0, r1
    18d2:	6021      	str	r1, [r4, #0]
    18d4:	6062      	str	r2, [r4, #4]
    18d6:	605c      	str	r4, [r3, #4]
    18d8:	e7ca      	b.n	1870 <_free_r+0x24>
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	20000088 	.word	0x20000088

000018e0 <_realloc_r>:
    18e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18e2:	0007      	movs	r7, r0
    18e4:	000d      	movs	r5, r1
    18e6:	0016      	movs	r6, r2
    18e8:	2900      	cmp	r1, #0
    18ea:	d105      	bne.n	18f8 <_realloc_r+0x18>
    18ec:	0011      	movs	r1, r2
    18ee:	f7ff fc27 	bl	1140 <_malloc_r>
    18f2:	0004      	movs	r4, r0
    18f4:	0020      	movs	r0, r4
    18f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18f8:	2a00      	cmp	r2, #0
    18fa:	d103      	bne.n	1904 <_realloc_r+0x24>
    18fc:	f7ff ffa6 	bl	184c <_free_r>
    1900:	0034      	movs	r4, r6
    1902:	e7f7      	b.n	18f4 <_realloc_r+0x14>
    1904:	f000 f812 	bl	192c <_malloc_usable_size_r>
    1908:	002c      	movs	r4, r5
    190a:	4286      	cmp	r6, r0
    190c:	d9f2      	bls.n	18f4 <_realloc_r+0x14>
    190e:	0031      	movs	r1, r6
    1910:	0038      	movs	r0, r7
    1912:	f7ff fc15 	bl	1140 <_malloc_r>
    1916:	1e04      	subs	r4, r0, #0
    1918:	d0ec      	beq.n	18f4 <_realloc_r+0x14>
    191a:	0029      	movs	r1, r5
    191c:	0032      	movs	r2, r6
    191e:	f7ff ff78 	bl	1812 <memcpy>
    1922:	0029      	movs	r1, r5
    1924:	0038      	movs	r0, r7
    1926:	f7ff ff91 	bl	184c <_free_r>
    192a:	e7e3      	b.n	18f4 <_realloc_r+0x14>

0000192c <_malloc_usable_size_r>:
    192c:	1f0b      	subs	r3, r1, #4
    192e:	681b      	ldr	r3, [r3, #0]
    1930:	1f18      	subs	r0, r3, #4
    1932:	2b00      	cmp	r3, #0
    1934:	da01      	bge.n	193a <_malloc_usable_size_r+0xe>
    1936:	580b      	ldr	r3, [r1, r0]
    1938:	18c0      	adds	r0, r0, r3
    193a:	4770      	bx	lr
    193c:	682f2e2e 	.word	0x682f2e2e
    1940:	732f6c61 	.word	0x732f6c61
    1944:	682f6372 	.word	0x682f6372
    1948:	695f6c61 	.word	0x695f6c61
    194c:	00632e6f 	.word	0x00632e6f
    1950:	682f2e2e 	.word	0x682f2e2e
    1954:	732f6c61 	.word	0x732f6c61
    1958:	682f6372 	.word	0x682f6372
    195c:	735f6c61 	.word	0x735f6c61
    1960:	6d5f6970 	.word	0x6d5f6970
    1964:	6e79735f 	.word	0x6e79735f
    1968:	00632e63 	.word	0x00632e63
    196c:	682f2e2e 	.word	0x682f2e2e
    1970:	732f6c61 	.word	0x732f6c61
    1974:	682f6372 	.word	0x682f6372
    1978:	755f6c61 	.word	0x755f6c61
    197c:	74726173 	.word	0x74726173
    1980:	6e79735f 	.word	0x6e79735f
    1984:	00632e63 	.word	0x00632e63

00001988 <_usarts>:
    1988:	00000003 40100004 00030000 0000d8ad     .......@........
    1998:	00000000                                ....

0000199c <_i2cms>:
	...

000019b4 <_i2css>:
	...

000019c4 <sercomspi_regs>:
    19c4:	0020000c 00020000 00000000 01ff0009     .. .............
    19d4:	00000000 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    19e4:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    19f4:	444d4153 52203132 79646165 00000a0d     SAMD21 Ready....
    1a04:	203a4b4f 303d314b 32302578 4b202c58     OK: K1=0x%02X, K
    1a14:	78303d32 58323025 00000a0d              2=0x%02X....

00001a20 <__sf_fake_stderr>:
	...

00001a40 <__sf_fake_stdin>:
	...

00001a60 <__sf_fake_stdout>:
	...
    1a80:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    1a90:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    1aa0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    1ab0:	00006665                                ef..

00001ab4 <_init>:
    1ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ab6:	46c0      	nop			; (mov r8, r8)
    1ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1aba:	bc08      	pop	{r3}
    1abc:	469e      	mov	lr, r3
    1abe:	4770      	bx	lr

00001ac0 <__init_array_start>:
    1ac0:	000000dd 	.word	0x000000dd

00001ac4 <_fini>:
    1ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1aca:	bc08      	pop	{r3}
    1acc:	469e      	mov	lr, r3
    1ace:	4770      	bx	lr

00001ad0 <__fini_array_start>:
    1ad0:	000000b5 	.word	0x000000b5
